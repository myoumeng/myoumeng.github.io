<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用HEXO打造更个性化的个人博客（四）]]></title>
    <url>%2Fpost%2F3724.html</url>
    <content type="text"><![CDATA[第四波攻势来临啦~还是对hexo-next做优化、美化♣️这次我想加入折叠功能、鼠标放置后图片放大、分类和标签界面显示年份、可爱的十二生肖、分类层级显示、文章阅读后评分、侧栏加音乐 折叠功能 鼠标放置后图片放大 分类和标签界面显示年份 年份后显示十二生肖 分类&amp;标签层级显示 文章阅读后评分 侧栏加音乐 折叠功能有大段的东西想要放上去，但又不想占据大量的位置。折叠是最好的选择。[^2][^2]:https://blog.rmiao.top/hexo-fold-block/ (其实也可以用tabs功能，请看：)下面在Hexo的主题上定制添加折叠功能。next主题的主要js位于themes/next/source/js/src/post-details.js,在里面找合适的位置，添加如下代码： 12345678$(document).ready(function()&#123; $(document).on(&apos;click&apos;, &apos;.fold_hider&apos;, function()&#123; $(&apos;&gt;.fold&apos;, this.parentNode).slideToggle(); $(&apos;&gt;:first&apos;, this).toggleClass(&apos;open&apos;); &#125;); //默认情况下折叠 $(&quot;div.fold&quot;).css(&quot;display&quot;,&quot;none&quot;);&#125;); 在主题的scripts下添加一个tags.js, 位于themes/next/scripts/tags.jsthemes/next/scripts/tags.js123456789101112131415161718192021222324/* @haohuawu 修复 Nunjucks 的 tag 里写 ```代码块```，最终都会渲染成 undefined 的问题 https://github.com/hexojs/hexo/issues/2400*/const rEscapeContent = /&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g;const placeholder = '\uFFFD';const rPlaceholder = /(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g;const cache = [];function escapeContent(str) &#123; return '&lt;!--' + placeholder + (cache.push(str) - 1) + '--&gt;';&#125;hexo.extend.filter.register('before_post_render', function(data) &#123; data.content = data.content.replace(rEscapeContent, function(match, content) &#123; return escapeContent(content); &#125;); return data;&#125;);hexo.extend.filter.register('after_post_render', function(data) &#123; data.content = data.content.replace(rPlaceholder, function() &#123; return cache[arguments[1]]; &#125;); return data;&#125;); 再继续添加一个fold.js:themes/next/scripts/fold.js12345678/* global hexo */// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;function fold (args, content) &#123; var text = args[0]; if(!text) text = "点击显/隐"; return '&lt;div&gt;&lt;div class="fold_hider"&gt;&lt;div class="close hider_title"&gt;' + text + '&lt;/div&gt;&lt;/div&gt;&lt;div class="fold"&gt;\n' + hexo.render.renderSync(&#123;text: content, engine: 'markdown'&#125;) + '\n&lt;/div&gt;&lt;/div&gt;';&#125;hexo.extend.tag.register('fold', fold, &#123;ends: true&#125;); 最后，添加几个自定义样式，位置themes/next/source/css/_custom/custom.styl1234567891011.hider_title&#123; font-family: "Microsoft Yahei"; cursor: pointer;&#125;.close:after&#123; content: "▼";&#125;.open:after&#123; content: "▲";&#125; 使用方法：在我们需要折叠的地方前后添加便签，示例用法：123&#123;% fold 点击显/隐内容 %&#125;something you want to fold, include code block.&#123;% endfold %&#125; 分类和标签界面显示年份修改分类年份打开 \themes\next\layout\category.swig 查找123&#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post) &#125;&#125;&#123;% endfor %&#125; 改为12345678910111213&#123;% for post in page.posts %&#125; &#123;# Show year #&#125; &#123;% set year %&#125; &#123;% set post.year = date(post.date, &apos;YYYY&apos;) %&#125; &#123;% if post.year !== year %&#125; &#123;% set year = post.year %&#125; &lt;div class=&quot;collection-title&quot;&gt; &lt;h2 class=&quot;archive-year motion-element&quot; id=&quot;archive-year-&#123;&#123; year &#125;&#125;&quot;&gt;&#123;&#123; year &#125;&#125;&lt;/h2&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;# endshow #&#125; &#123;&#123; post_template.render(post) &#125;&#125;&#123;% endfor %&#125; 添加1234567&#123;% block script_extra %&#125; &#123;% if theme.use_motion %&#125; &lt;script type=&quot;text/javascript&quot; id=&quot;motion.page.archive&quot;&gt; $(&apos;.archive-year&apos;).velocity(&apos;transition.slideLeftIn&apos;); &lt;/script&gt; &#123;% endif %&#125;&#123;% endblock %&#125; 修改标签年份打开\themes\next\layout\tag.swig查找:123&#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post) &#125;&#125;&#123;% endfor %&#125; 改为:12345678910111213&#123;% for post in page.posts %&#125; &#123;# Show year #&#125; &#123;% set year %&#125; &#123;% set post.year = date(post.date, &apos;YYYY&apos;) %&#125; &#123;% if post.year !== year %&#125; &#123;% set year = post.year %&#125; &lt;div class=&quot;collection-title&quot;&gt; &lt;h2 class=&quot;archive-year motion-element&quot; id=&quot;archive-year-&#123;&#123; year &#125;&#125;&quot;&gt;&#123;&#123; year &#125;&#125;&lt;/h2&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;# endshow #&#125; &#123;&#123; post_template.render(post) &#125;&#125;&#123;% endfor %&#125; 添加1234567&#123;% block script_extra %&#125; &#123;% if theme.use_motion %&#125; &lt;script type=&quot;text/javascript&quot; id=&quot;motion.page.archive&quot;&gt; $(&apos;.archive-year&apos;).velocity(&apos;transition.slideLeftIn&apos;); &lt;/script&gt; &#123;% endif %&#125;&#123;% endblock %&#125; 修改分类&amp;标签层级显示分类层级在\themes\next\layout\_macro\post.swig查找[^1]：[^1]:https://qianling.pw/hexo-optimization/#8-%E4%BF%AE%E6%94%B9%E5%88%86%E7%B1%BB%E5%B1%82%E7%BA%A7%E6%98%BE%E7%A4%BA1&#123;&#123; __(&apos;symbol.comma&apos;) &#125;&#125; 将其改为 1&#123;&#123; __(&apos;&gt;&apos;) &#125;&#125; 则显示如下： 标签层级在\themes\next\source\css\_custom\custom.styl中添加:1234.category-list ul list-style none li:before content &apos;&gt;&gt; &apos; 则显示如下： 侧栏加音乐「aplayer」https://qianling.pw/hexo-optimization/#23-%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0-APlayer 打开 \themes\next\source\js\src\custom\ 放置 APlayer.min.js复制这个页面的内容： 点我即可 打开 \themes\next\layout\_custom\ 新建 sidebar.swig 写入 1234567891011121314151617181920212223242526&lt;div id=&quot;aplayer&quot; class=&quot;aplayer&quot;&gt;&lt;/div&gt;&lt;script src=&quot;/js/src/custom/APlayer.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;var ap = new APlayer(&#123; element: document.getElementById(&apos;aplayer&apos;), // Optional, player element narrow: false, // Optional, narrow style autoplay: false, // Optional, autoplay song(s), not supported by mobile browsers showlrc: 0, // Optional, show lrc, can be 0, 1, 2, see: ###With lrc mutex: true, // Optional, pause other players when this player playing theme: &apos;#e6d0b2&apos;, // Optional, theme color, default: #b7daff mode: &apos;random&apos;, // Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation` preload: &apos;metadata&apos;, // Optional, the way to load music, can be &apos;none&apos; &apos;metadata&apos; &apos;auto&apos;, default: &apos;auto&apos; listmaxheight: &apos;513px&apos;, // Optional, max height of play list music: [&#123; title: &apos;双笙 囧菌 - 世末歌者&apos;, author: &apos;双笙 囧菌&apos;, url: &apos;https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%8F%8C%E7%AC%99%20%E5%9B%A7%E8%8F%8C%20-%20%E4%B8%96%E6%9C%AB%E6%AD%8C%E8%80%85.mp3&apos;, pic: &apos;https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%8F%8C%E7%AC%99%20%E5%9B%A7%E8%8F%8C%20-%20%E4%B8%96%E6%9C%AB%E6%AD%8C%E8%80%85.webp&apos;, &#125;, &#123; title: &apos;幹物女(WeiWei)&apos;, author: &apos;封茗囧菌&apos;, url: &apos;https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%B0%81%E8%8C%97%E5%9B%A7%E8%8F%8C%20-%20%E5%B9%B9%E7%89%A9%E5%A5%B3(WeiWei).mp3&apos;, pic: &apos;https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%B0%81%E8%8C%97%E5%9B%A7%E8%8F%8C%20-%20%E5%B9%B9%E7%89%A9%E5%A5%B3(WeiWei).webp&apos;, &#125;] &#125;);&lt;/script&gt;]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>untagged</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用atom的snip来创作自定义代码片段，对Markdown也有效哦！]]></title>
    <url>%2Fpost%2F40310.html</url>
    <content type="text"><![CDATA[当我发现hexo+next有一些不错的自定义样式，能够给自己的文章增色时，我发现要重复使用许多相同的代码片段。积少成多，每一次写md时，就很难专心于思考&amp;打字，反而要花大量时间去回忆使用样式的多个代码^我这脑子经过的锤炼还不够^ ✧(≖ ◡ ≖✿)嘿嘿^，所以我对感觉就像是“好钢没有用在刀刃上”，咳咳我这也不算多好的钢 🤦‍♀️要是有立即、方便的解决重复输入代码的情况，那多省事省时间呀！聪明的人类（及程序员👨‍💻‍）早就想到了这一点！ 让我为你点一首歌吧！陪伴你看完这篇文章，或者静静享受歌曲吧！ snippet n. 小片，片段; 不知天高地厚的年轻人;我们可以理解为代码片段[^1]。[^1]:https://www.jianshu.com/p/2ee34d8da142 snippets.cson中自定义snip在atom中可以使用：cmd+shift+p ，然后搜索snip,回车打开第一个选项就是的。 在snippets.cson文件中输入snip，回车，就得到一个 snippet 模板： 1234&apos;.source.js&apos;: &apos;Snippet Name&apos;: &apos;prefix&apos;: &apos;Snippet Trigger&apos; &apos;body&apos;: &apos;Hello World!&apos; 其中： ‘.source.js’ 目标文件类型为 .js‘Snippet Name’ 要新建的 snippet 的名称‘prefix’ 触发当前 snippet 的代码‘body’ 要填充的代码 我们想要在相应的文件类型中写入不同的代码片段，那就要先设置好目标文件类型。 怎么查找目标文件类型？在atom中，先打开相应文件类型的文件；然后按cmd+shift+p，输入：editor:log cursor scope,选中它，随后就会在文件的右下角显示对应的文件类型。 比如我要设置markdown为目标文件类型，那最后显示的是： 123Scopes at Cursorsource.gfm 其中的source.gfm就是我们要替换’.source.js’中的代码。 .source.js必须有.作为开头 光标以c语言为例：C 语言的 if 写一个 snippet:1234&apos;.source.c&apos;: &apos;if&apos;: &apos;prefix&apos;: &apos;if&apos; &apos;body&apos;: &apos;if($1)&#123;$2&#125;&apos; $1 表示光标的默认位置$2 按下 tab键，光标跳到的第二个位置，以此类推 替换使用${1:&#39;replaced&#39;}替换$1即可转换光标到选定状态，选定内容为replaced. 换行在要填充的代码中使用回车并不能使代码填充以后自动换行:1. 自动换行要使用\n2. 或者用”””将要填充的代码包起来: 12345678&apos;.source.c&apos;: &apos;if&apos;: &apos;prefix&apos;: &apos;if&apos; &apos;body&apos;: &quot;&quot;&quot; if($1) &#123; $2\n&#125; &quot;&quot;&quot; 定义多个代码片段要给 C 语言文件定义多个 snippet ，只需在.source.c下从添加新的 snippet 名称写起。 12345678910111213141516&apos;.source.c&apos;: &apos;if&apos;: &apos;prefix&apos;: &apos;if&apos; &apos;body&apos;: &quot;&quot;&quot; if($1) &#123; $2\n&#125; &quot;&quot;&quot; &apos;while&apos;: &apos;prefix&apos;: &apos;while&apos; &apos;body&apos;:&quot;&quot;&quot; while($1) &#123; $2 &#125; &quot;&quot;&quot;]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>atom</tag>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo基本知识]]></title>
    <url>%2Fpost%2F63321.html</url>
    <content type="text"><![CDATA[要做好next主题，这些内容一定要懂😁 next主题next主题集成了我们大部分想用的功能哦！也就是有很多插件，在主题配置文件中，将默认的false改为true即可。我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了^1。 默认目录结构：1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 drafts：草稿文章 posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮. 我们最先修改的应该是在hexo根目录下的配置文件_config.yml文件，这里是配置整个站点的配置信息。 其次就是我们的主题配置文件，在对应的主题下的_config.yml 因为我使用的是next主题，所以目录的路径为\Hexo\themes\next\_config.yml 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)然后我们需要修改样式的话是需要设置css和甚至是修改模板， next主题的全部逻辑12345678910111213141516171819202122232425262728293031323334353637├── .github #git信息├── languages #多语言| ├── default.yml #默认语言| └── zh-Hans.yml #简体中文| └── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _custom #可以自己修改的模板，覆盖原有模板| | ├── _header.swig #头部样式| | ├── _sidebar.swig #侧边栏样式| ├── _macro #可以自己修改的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── uploads #添加的文件| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道]]></content>
  </entry>
  <entry>
    <title><![CDATA[用HEXO打造更个性化的个人博客（三）]]></title>
    <url>%2Fpost%2F24651.html</url>
    <content type="text"><![CDATA[总有些意想不到的好看的样式嘻嘻，我就借鉴过来了吖 随笔寻寻觅觅，在hexo next的个性化道路上，我也陆陆续续发现了许许多多不错的甚至是接近perfect的博客，令我好生羡慕，后来发现，很多时候是自己没有用好hexonext的自带功能，以及由于我html、css接触不深，导致配置的成果都是不如人意的。 我真的没想到，因为hexo-next，我会花近1个月的时间，日日沉浸在电脑中（是的，过春节回老家也带着电脑，对着自己的博客修修补补），我居然会花近1周的时间粗略地学习html和css。emm…我有种喜欢做事就要面面俱到的强迫症，所以硬是把html和css的知识都过了一遍。 嘿，说真的哈，我过了一遍后没有记住这些html标签以及css的各种样式，不过，让我在理解next的代码上有了不小的进步，对于网络上的95%的自定义hexo教程都能知其所以然了，还熟悉了这么在网页上看css、html代码。天哪，我这是初窥代码的世界了呀，是不是也算得上半个小前端了呢？？？ 我在大学做过^技术一般^的美工，也时常听过“前端”“css”，现在！竟然！！自己开始琢磨了！！！真是谁能想到呢，我的专业可是和程序员关系不深吖。 这次，真的费了好大的劲，不仅接触到了hexo、next、html、css，还基本上可以构建一个自己喜爱的小窝-我的博客，真的挺欢喜的。当然啦，还有许多待用上的功能，我就开始一一记录了，写文文的时候就可以学以致用啦，对正在寻找”如何个性化hexo博客”的你，或许会有帮助哦！ 链接持久化安装方式：在博客根目录输入1npm install hexo-abbrlink --save 在站点配置文件中更改以下信息：12345permalink: post/:abbrlink.htmlpermalink_defaults: abbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 修改标签云位置：\blog\themes\next\layout\page.swig1&#123;&#123; tagcloud(&#123;min_font: 13, max_font: 31, amount: 1000, color: true, start_color: '#9733EE', end_color: '#FF512F'&#125;) &#125;&#125; 修改对应参数值即可，参数说明见 Hexo 官方文档，颜色可以参考这个网站，自己去纠结…… 主题自带样式：文本居中的引用此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用。使用方式： HTML方式：使用这种方式时，给 img 添加属性 class=”blockquote-center” 即可。标签方式：使用 centerquote 或者 简写 cq。 123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 123&#123;% cq %&#125;人的一切痛苦，本质上都是对自己的无能的愤怒王小波&#123;% endcq %&#125; 效果如下： 人的一切痛苦，本质上都是对自己的无能的愤怒王小波 主题自带样式：Bootstrap Callout/note记录使用方式：1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; 其中，class_name 可以是以下列表中的一个值： default primary success info warning danger hahaha 嘻嘻我是高级的 我是成功！ hahaha我带来信息 hahaha⚠️警告哦 hahaha危险哦！！！ 1&#123;% note danger %&#125;note danger, note danger, note danger&#123;% endnote %&#125; 什么是lisp？？1&#123;% note danger %&#125;note danger, note danger, note danger&#123;% endnote %&#125; note danger, note danger, note danger 主题自带样式：label标签有这些： 123456&#123;% label default@default %&#125;&#123;% label primary@primary %&#125;&#123;% label success@success %&#125;&#123;% label info@info %&#125;&#123;% label warning@warning %&#125;&#123;% label danger@danger %&#125; 使用如下： Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 12345Lorem &#123;% label @ipsum %&#125; &#123;% label primary@dolor sit %&#125; amet, consectetur &#123;% label success@adipiscing elit, %&#125; sed &#123;% label info@do eiusmod %&#125; tempor incididunt ut labore et dolore magna aliqua.Ut enim *&#123;% label warning @ad %&#125;* minim veniam, quis **&#123;% label danger @nostrud %&#125;** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Duis aute irure dolor in reprehenderit in voluptate ~~&#123;% label default @velit %&#125;~~ &lt;mark&gt;esse&lt;/mark&gt; cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 主题自带样式：tabs 标签1234567891011&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**这是选项卡 1** 哈哈哈哈哈哈哈哈哈哈哈哈😁吼吼吼我是选项卡1的内容&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 2，这是标题吗？** 我是第二个选项卡的内容哟&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 3** 哇，😝嘻嘻&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 选项卡 1选项卡 2选项卡 3这是选项卡 1 哈哈哈哈哈哈哈哈哈哈哈哈😁吼吼吼我是选项卡1的内容这是选项卡 2，这是标题吗？ 我是第二个选项卡的内容哟这是选项卡 3 哇，😝嘻嘻 然后上面源码中, 2表示一开始在第二个选项卡，非必须，若数值为-1则隐藏选项卡内容。 主题自带样式：按钮https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test 使用方法：123&#123;% button /path/to/url/, text, icon [class], title %&#125;or:&#123;% btn /path/to/url/, text, icon [class], title %&#125; 点击我下载百度 点击下载百度吧 啦啦啦 笑嘻嘻 Text Text & Title 1234567891011&#123;% btn url(https://www.baidu.com), 点击我下载百度, download fa-lg fa-fw %&#125;&#123;% btn url(https://www.baidu.com), 点击下载百度吧, download fa-2x %&#125;&#123;% btn url(https://www.baidu.com), 啦啦啦, home fa-3x fa-fw %&#125;&#123;% btn url(https://www.baidu.com), 笑嘻嘻, home fa-3x, 嘿嘿这是标题 %&#125;&#123;% btn #, Text %&#125;&#123;% btn #, Text &amp; Title,, Title %&#125; 自定义样式 数字块需加入custom.styl的代码： 文件位置：~/blog/themes/next/source/css/_custom/custom.styl12345678910// 自定义的数字块span#inline-toc &#123; display: inline-block; border-radius: 80% 100% 90% 20%; background-color: rgb(227, 242, 253); color: #555; padding: 0.05em 0.4em; margin: 2px 5px 2px 0px; line-height: 1.5;&#125; 使用方法： 1&lt;span id=&quot;inline-toc&quot;&gt;1.&lt;/span&gt; 效果如下：1. 给网页title添加一些搞怪特效crash_cheat.js在next\source\js\src文件夹下创建crash_cheat.js，添加代码^cheat： 1234567891011121314151617&lt;!--崩溃欺骗--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener(&apos;visibilitychange&apos;, function () &#123; if (document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/img/TEP.ico&quot;); document.title = &apos;╭(°A°`)╮ 页面崩溃啦 ~&apos;; clearTimeout(titleTime); &#125; else &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/favicon.ico&quot;); document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 噫又好了~&apos; + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); 引用：在next\layout\_layout.swig文件中，添加引用（注：在swig末尾添加）： 12&lt;!--崩溃欺骗--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/crash_cheat.js&quot;&gt;&lt;/script&gt; 添加顶部加载条https://github.com/theme-next/theme-next-pace 在主题配置文件_config.yml中，找到pace并修改：12pace: truepace_theme: pace-theme-minimal 加载条样式有许多，在你找到的位置中可自行更换 Load bar at the top for NexTInstallation Step 1 → Go to NexT dirChange dir to NexT directory. There must be layout, source, languages and other directories:123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 → Get moduleInstall module to source/lib directory:1$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace Step 3 → Set it upEnable module in NexT_config.yml file:1pace: true Update12$ cd themes/next/source/lib/pace$ git pull 鼠标点击特效”富强””民主””文明”新建文件为：fuqiangtexiao.js 文件内容为：文件位置：/blog/themes/next/source/js/src1234567891011121314151617181920212223242526272829303132333435363738var a_idx = 0;jQuery(document).ready(function($) &#123; $("body").click(function(e) &#123; var a = new Array ("富强", "民主", "文明", "和谐","☀️","自由", "平等", "公正", "法治","🌎", "爱国", "敬业", "诚信", "友善","🤝"); var $i = $("&lt;span/&gt;").text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css(&#123; "z-index": 5, "top": y - 20, "left": x, "position": "absolute", "font-weight": "bold", "color": s() &#125;); $("body").append($i); $i.animate(&#123; "top": y - 180, "opacity": 0 &#125;, 3000, function() &#123; $i.remove(); &#125;); &#125;); setTimeout('delay()', 2000);&#125;);function delay() &#123; $(".buryit").removeAttr("onclick");&#125;function s() &#123; return "rgb(" + ~~ (250 * Math.random()) + "," + ~~ (240 * Math.random()) + "," + ~~ (250 * Math.random()) + ")"&#125; 放入位置：/blog/themes/next/source/js/src 然后再引用：在next\layout\_layout.swig文件中，添加引用（注：在&lt;/body&gt;末尾添加）：12&lt;!-- 鼠标特效 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fuqiangtexiao.js&quot;&gt;&lt;/script&gt; 即可✌️ 当然，可能有其他的鼠标点击代码，那就只需要更改fuqiangtexiao.js里面的代码就行，可以参考以下几份文档： https://blog.techauch.com/get/detail/54116 https://blog.csdn.net/qq_31878883/article/details/86426232 https://www.cnblogs.com/mylhy/p/10016874.html https://www.cnblogs.com/dalulu/p/9284941.html http://www.5lli.com/358.html]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>untagged</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用HEXO打造更个性化的个人博客（二）]]></title>
    <url>%2Fpost%2F27698.html</url>
    <content type="text"><![CDATA[我的确花了不少时间在整理自己的博客上，hexo站点的各项配置，更是折腾了我许久，谁让我本身对代码不是很懂呢？全程只能靠自己琢磨、学习，参考了许许多多的教程，有老有新。可是都是混在一起，我也没有太分开，导致自己多次配置出了差错，并且很难修整，天知道，我重新安装hexo以及next主题是否有超过10次了。真是痛苦的经历。还好，最终我获胜了😎这次要介绍与图片、音乐、视频、动效相关的内容哦！期待地搓手手~ 随笔因为本身对hexo及其不熟悉，所以自定义的过程既长久又艰辛^一把辛酸泪呀^。还好，风风雨雨都经历过来了，这样才有成长和进步嘛。 磨刀不误砍柴工，一个漂亮的、舒服的博客，总会让人赏心悦目，更有希望坚持写下去。若是我们在能力足够的前提下，还能亲手打造出来，那更是成就感十足！ 接下来，就要好好地打造一个令我们舒适、愉悦的个人博客啦！ 这是本文目录 [TOC] 当然啦，我的博客页面右下方的汉堡图标，点击后也会有目录大纲出来，陪你看完此文哦！ 在文章末尾添加“文章结束”标记在路径Blog\themes\next\layout\_macro文件夹中新建passage-end-tag.swig文件[^文章结束]。[^文章结束]:https://www.jianshu.com/p/9f0e90cc32c2 12345//切换到路径_macrocd [_macro路径]//创建passage-end-tag.swig文件touch passage-end-tag.swig 在passage-end-tag.swig添加以下内容，直接用文本编辑器打开，粘贴以下内容后保存 1234567&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt; -------------本文结束啦&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读------------- &lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开Blog\themes\next\layout\_macro\post.swig，在post-body之后，post-footer之前（post-footer之前两个DIV），添加以下代码： 文件位置：Blog\themes\next\layout\_macro\post.swig12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 添加位置，如下图所示： 最后修改主题配置文件_config.yml，在末尾添加：123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 配置完成之后，效果如下： 背景图片通过 jquery-backstretch[^jq]，具体操作呢，编辑文件：[^jq]:https://github.com/jquery-backstretch/jquery-backstretch 文件位置：~/blog/themes/next/layout/_layout.swig12345+ &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js"&gt;&lt;/script&gt;+ &lt;script&gt;+ $("body").backstretch("https://背景图.jpg");+ &lt;/script&gt;&lt;/body&gt; 加入到文件最后面前面即可。 如果想要轮播效果，那就这样添加代码：把上面的$(&quot;body&quot;).backstretch(&quot;https://背景图.jpg&quot;)改为：12345$(&quot;body&quot;).backstretch([ &quot;https://背景图1.jpg&quot;, &quot;https://背景图2.jpg&quot;, &quot;https://背景图3.jpg&quot; ], &#123;duration: 4000&#125;); 你应该要知道duration持续时间的单位是milliseconds毫秒哦。 那就可以实现4秒从背景图1到2（或2到3，或3到1）的转变了。 文章摘要图片俗话说：「图文并茂」，现实中用笔书写文章实现起来比较困难，但在博客上可以很轻松实现sunglasses。 首先，文章摘要（excerpt）是指每篇文章在页面（page）上显示的那部分内容，也就是 [Read More] 之前的文章内容。由于它会展示在页面，因此在每篇文章的文章摘要中加一张图片，页面看起来就很美观。 但是有时候可能会出现一个问题：你想从文章中选一张图片作为文章摘要图片，而这张图片由于写作要求，必须添加在文章的末尾，这样点 [Read More] 查看文章时，这张图片就会重复出现了。咋办？ 前提是在主题配置文件中： 文件位置：~/blog/themes/next/_config.yml1234excerpt_description: falseauto_excerpt: enable: false 首先加代码： 文件位置：~/blog/themes/next/layout/_macro/post.swig1234567891011121314151617181920212223242526 &#123;% if is_index %&#125; &#123;% if post.description and theme.excerpt_description %&#125; &#123;&#123; post.description &#125;&#125; &lt;!--noindex--&gt; &lt;div class="post-button text-center"&gt; &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;"&gt; &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo; &lt;/a&gt; &lt;/div&gt; &lt;!--/noindex--&gt; &#123;% elif post.excerpt %&#125; &#123;&#123; post.excerpt &#125;&#125;++ &#123;% if post.image %&#125;+ &lt;div class="out-img-topic"&gt;+ &lt;img src=&#123;&#123; post.image &#125;&#125; class="img-topic" /&gt;+ &lt;/div&gt;+ &#123;% endif %&#125;+ &lt;!--noindex--&gt; &lt;div class="post-button text-center"&gt; &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __('post.more') &#125;&#125;&#123;% endif %&#125;" rel="contents"&gt; &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo; &lt;/a&gt; &lt;/div&gt; &lt;!--/noindex--&gt; 为了防止有的图片宽度不够导致风格不够统一，页面不美观，需要在custom.styl中加入： 文件位置：~/blog/themes/next/source/css/_custom/custom.styl1234// 自定义的文章摘要图片样式img.img-topic &#123; width: 100%;&#125; 最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行： image: url url即图片的链接地址～ 点击侧栏头像回到博客首页不知道为什么，我看到侧栏头像的第一反应是点击，然后心理预期会跳到博客首页，可惜也仅是预期，那么开始动手吧～首先要在主题配置文件中配置好，比如我把头像avatar.gif放在~/blog/source/uploads/下，则： 文件位置：~/blog/themes/next/_config.yml12345# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gif-#avatar: /images/avatar.gif+avatar: /uploads/avatar.gif 然后编辑文件： 文件位置：~/blog/themes/next/layout/_macro/sidebar.swig12345+ &lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt;+ &lt;/a&gt; 最后就 OK 了～ 字体设置 主题配置文件中找到font，改为以下内容123456789101112131415161718192021222324252627282930313233343536373839404142font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default) host: https://fonts.loli.net # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: xx`. Use `px` as unit. # Global font settings used on &lt;body&gt; element. global: external: true family: Lato size: # Font settings for Headlines (h1, h2, h3, h4, h5, h6). # Fallback to `global` font settings. headings: external: true family: Roboto Slab size: # Font settings for posts. # Fallback to `global` font settings. posts: external: true family: # Font settings for Logo. # Fallback to `global` font settings. logo: external: true family: size: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: Roboto Mono size: 出现鼠标点击后的文字“富强，民主，敬业…”特效在填上一段代码：位置：blog/themes/hexo-theme-next-6.7.0/layout/_layout.swig1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!-- 鼠标特效 --&gt;&lt;script type="text/javascript"&gt;var a_idx = 0;jQuery(document).ready(function($) &#123; $("body").click(function(e) &#123; var a = new Array ("富强", "民主", "文明", "和谐","☀️","自由", "平等", "公正", "法治","🌎", "爱国", "敬业", "诚信", "友善","🤝"); var $i = $("&lt;span/&gt;").text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css(&#123; "z-index": 5, "top": y - 20, "left": x, "position": "absolute", "font-weight": "bold", "color": s() &#125;); $("body").append($i); $i.animate(&#123; "top": y - 180, "opacity": 0 &#125;, 3000, function() &#123; $i.remove(); &#125;); &#125;); setTimeout('delay()', 2000);&#125;);function delay() &#123; $(".buryit").removeAttr("onclick");&#125;function s() &#123; return "rgb(" + ~~ (255 * Math.random()) + "," + ~~ (255 * Math.random()) + "," + ~~ (255 * Math.random()) + ")"&#125;&lt;/script&gt;&lt;script type="text/javascript" src= "/js/src/instantclick.min.js" data-no-instant&gt;&lt;/script&gt;&lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt; 页脚使用红色的小爱心动效介绍next v6主题，很简单的方法，就是在主题配置中，找到icon:。animated：true意味着让图标动起来，有如果换成心脏❤️图标，那就有嘭嘭嘭跳动的效果，根据下面的把代码改一下就OK了！ 123456789# Icon between year and copyright info.icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/ # `heart` is recommended with animation in red (#ff0000). name: heart # If you want to animate the icon, set it to true. animated: true # Change the color of icon, using Hex Code. color: &quot;#ff0000&quot; 插入音乐自从爱上我的博客小屋后，一直在优化、美化，音乐这个动态的美感，总感觉加上后就能够更加个性化、有感觉，好像很有我“自己的味道”，非常让我有归属感。是吧！你应该也赞同，音乐必不可少咯:fa-smile:所以，必须有音乐！精神的寄托，品味的提升，吼吼吼。 way1.直接用 HTML 的标签写法如下： 1&lt;audio src=&quot;https://什么什么什么.mp3&quot; style=&quot;max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;&quot; controls=&quot;controls&quot; loop=&quot;loop&quot; preload=&quot;meta&quot;&gt;Your browser does not support the audio tag.&lt;/audio&gt; 注意，https://是链接开头哦！必须有的。以防止有人用的是http:// way2.用插件有显示歌词功能，也美观，建议使用这种方法。 安装插件首先在站点文件夹根目录安装插件： 所在目录：~/blog/1npm install hexo-tag-aplayer --save 单首歌曲==md文章==中的写法： 1&#123;% aplayer &quot;歌曲名&quot; &quot;歌手名&quot; &quot;https://什么什么什么.mp3&quot; &quot;https://封面图.jpg&quot; &quot;lrc:https://歌词.lrc&quot; %&#125; 高级自定义代码：1&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125; 标签参数title : 曲目标题author: 曲目作者url: 音乐文件 URL 地址picture_url: (可选) 音乐对应的图片地址narrow: （可选）播放器袖珍风格autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能width:xxx: (可选) 播放器宽度 (默认: 100%)lrc:xxx: （可选）歌词文件 URL 地址 歌单支持歌单：1234567891011121314151617181920212223&#123;% aplayerlist %&#125;&#123; &quot;autoplay&quot;: false, &quot;showlrc&quot;: 3, &quot;mutex&quot;: true, &quot;music&quot;: [ &#123; &quot;title&quot;: &quot;歌曲名&quot;, &quot;author&quot;: &quot;歌手名&quot;, &quot;url&quot;: &quot;https://什么什么什么.mp3&quot;, &quot;pic&quot;: &quot;https://封面图.jpg&quot;, &quot;lrc&quot;: &quot;https://歌词.lrc&quot; &#125;, &#123; &quot;title&quot;: &quot;歌曲名&quot;, &quot;author&quot;: &quot;歌手名&quot;, &quot;url&quot;: &quot;https://什么什么什么.mp3&quot;, &quot;pic&quot;: &quot;https://封面图.jpg&quot;, &quot;lrc&quot;: &quot;https://歌词.lrc&quot; &#125; ]&#125;&#123;% endaplayerlist %&#125; 稍等，别急，一首一首的这样加入岂不是要累shi。:fa-tripadvisor:这里有更好的方法，用meting 如果是一首付费的歌曲呢？会怎么样？首先在网易云找到这个音乐，复制浏览器上的链接：https://music.163.com/#/song?id=29722582很明显，后面就有id=29722582 那我要用简单的代码：1&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;https://music.163.com/#/song?id=29722582&quot; %&#125; 显示如下： var ap = new APlayer({ element: document.getElementById("aplayer-vfpcujuE"), narrow: false, autoplay: false, showlrc: false, music: { title: "Caffeine", author: "Jeff Williams", url: "https://music.163.com/#/song?id=29722582", pic: "", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 呵呵，发现竟然没有显示，那我就换一个代码，用它（When you use MetingJS, your blog can play musics from Tencent, Netease, Xiami, Kugou, Baidu and more.）^meting ok,再试一下，代码如下1&#123;% meting &quot;29722582&quot; &quot;netease&quot; &quot;song&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#000&quot;%&#125; 太棒了，能够显示付费下载的单首歌曲。那么，再试下我的歌单！同样，我们播放网易云歌单，然后看到浏览器上的地址为：https://music.163.com/#/my/m/music/playlist?id=113655500。后面就是id。比如，我的歌单的id=2639061041；然后在一篇博客md文章中，写下如下代码：1&#123;% meting &quot;id&quot; &quot;netease&quot; &quot;playlist&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125; 用上我的id后，显示如下： 1The &#123;% meting %&#125; options are shown below: Option Default Description id required song id / playlist id / album id / search keyword server required Music platform: netease, tencent, kugou, xiami, baidu type required song, playlist, album, search, artist fixed false Enable fixed mode mini false Enable mini mode loop all Player loop play, values: ‘all’, ‘one’, ‘none’ order list Player play order, values: ‘list’, ‘random’ volume 0.7 Default volume, notice that player will remember user setting, default volume will not work after user set volume themselves - lrctype 0 Lyric type listfolded false Indicate whether list should folded at first autoplay false Autoplay song(s), not supported by mobile browsers mutex true Pause other players when this player playing listmaxheight 340px Max height of play list preload auto The way to load music, can be none, metadata, auto storagename metingjs LocalStorage key that store player setting theme #ad7a86 Theme color 找到付费音乐的外部链接&amp;id其实，很多时候由于自己的歌单部分音乐要付费，导致无法生成外部链接，更找不到id了，所以，教大家怎么找到外部链接&amp;id！[^音乐][^音乐]:https://www.shknn.com/music-163-gedan.html id在浏览器中首先在网易云找到这个音乐，复制浏览器上的链接：https://music.163.com/#/song?id=29722582很明显，后面就有id=29722582 外部链接需要在网页上检查元素 （以 Chrome 为例，其他浏览器类似）打开歌单页面，在“生成外链播放器”上右击，点击审查元素（检查） ctrl+shift+i； 接着找到生成外链播放器这段文字，outchain这里，直接双击复制前面的/outchain/0/46064061/ 浏览器中输入：http://music.163.com/#/outchain/0/46064061/也就是，http://music.163.com/#+你复制的内容 那么，就可以看到外链播放器啦！ 视频way1.直接用 HTML 的标签写法如下： 1&lt;video poster=&quot;https://封面图.jpg&quot; src=&quot;https://什么什么什么.mp4&quot; style=&quot;max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;&quot; controls=&quot;controls&quot; loop=&quot;loop&quot; preload=&quot;meta&quot;&gt;Your browser does not support the video tag.&lt;/video&gt; way2.用插件功能更加强大，比如可以弹幕，非常建议食用。 首先在站点文件夹根目录安装插件[^dplayer]： [^dplayer]https://github.com/MoePlayer/hexo-tag-dplayer 所在目录：~/blog/1npm install hexo-tag-dplayer --save 然后md文章中的写法： 1&#123;% dplayer &quot;url=https://什么什么什么.mp4&quot; &quot;https://封面图.jpg&quot; &quot;api=https://api.prprpr.me/dplayer/&quot; &quot;id=&quot; &quot;loop=false&quot; %&#125; 要使用弹幕，必须有api和id两项，并且若使用的是官方的 api 地址（即上面的”api=https://api.prprpr.me/dplayer/&quot;），id 的值不能与这个列表的值一样。id 的值自己随便取，唯一要求就是前面这点。 如果唯一要求难倒了你，可以使用这个工具将一段与众不同的文字joy生成一段看起来毫无意义的哈希值，这样看起来是不是好多了。 唔，我也是边学边用，有些也是不熟悉，我来试一下这个视频能不能播放吧！ (function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"http://he.yinyuetai.com/uploads/videos/common/77AA01404947D9221B9AB681B0B043F9.flv?sc=0484434754292fc9&br=3127&vid=469820&aid=25209&area=ML&vst=0"},"danmaku":{"id":"469820","api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 哇，我可是试了许多次，那个url一直不对，之前用的是直接copy浏览器上的网址，但是并没有用。随后，我在视频上右键，点击“复制视频地址”，哈哈，就成了！把这个视频地址拷贝到url=后面就好咯！ 目前已经实现了很多功能呢！😝文文会继续更新的，这篇就到这咯。]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>博客</tag>
        <tag>个性化</tag>
        <tag>插件</tag>
        <tag>NEXT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年最后一天的最后一晚]]></title>
    <url>%2Fpost%2F55132.html</url>
    <content type="text"><![CDATA[新年快乐呀~马上就要跨年了，2018年即将离开，一去不返，希望我们的2019年，会更加幸福、快乐！大家都努力地学习、挣钱、追求多姿多彩的生活！ 这一晚上，我居然还在一边做hexo一边看跨年晚会，我只想呵呵🙄]]></content>
  </entry>
  <entry>
    <title><![CDATA[用HEXO打造更个性化的个人博客（一）]]></title>
    <url>%2Fpost%2F64584.html</url>
    <content type="text"><![CDATA[个人博客，在我的心中，就像一个家一样，它像是我心灵的避港湾。博客里面的文章是构成我家的主要部分，我选择的next主题是家的装饰，来我博客参观的你们，就是远道而来的贵客。 我很喜欢这样的想法，所以才会那么认真的对待我的家🏠，耗费许多心血、精力、时间，去完善它。 相信，它不会让我失望的。 可以看到，我目前用的next主题是v6.7.0，也许以后还会换，目前就记下我常用的一些装点方法吧！如果也对你有用，那就更好了。 此文主要记录一下我使用的插件 next有些功能是需要安装插件的，所以，还是要看懂英文注释，然后去相应的网站下载即可。 这是本文目录 [TOC] 当然啦，我的博客页面右下方的汉堡图标，点击后也会有目录大纲出来，陪你看完此文哦！ 相关文章https://github.com/tea3/hexo-related-popular-posts npm install hexo-related-popular-posts –save 分享NeedMoreShare2 for NexThttps://github.com/theme-next/theme-next-needmoreshare2 Step 1 → Go to NexT dir到next主题的根目录（而不是hexo哦）Change dir to NexT directory. There must be layout, source, languages and other directories:123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 → Get module安装模块Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton Step 3 → Set it upEnable module in NexT _config.yml file:到next主题配置文件中设置好以下代码： 123456needmoreshare2: enable: true postbottom: enable: true float: enable: true Update 12$ cd themes/next/source/lib/needsharebutton$ git pull 部署到gutbub上hexo-deployer-git需要安装插件后，就可以部署到github上，对于像我一样没有买域名的，也就可以把代码存到github上了。 安装插件在博客根目录，使用命令npm install hexo-deployer-git --save，即可安装插件 配置在站点_config.yml配置中，deploy 的type使用git，而不是github 1234deploy type: git repository: git@github.com:YOUR_ID/YOUR_ID.github.io.git branch: master 使用方法当我们用了hexo g生成静态博客、hexo s在当地可浏览网页页面后无误，觉得可以了，那就使用hexo d把生成的文件部署到github上保存，就好咯。 hexo d是hexo deploy的简写 实现博客订阅功能generator-feedhttps://github.com/hexojs/hexo-generator-feedLeave rss as empty to use site’s feed link, and install hexo-generator-feed: npm install hexo-generator-feed --save. 即cd blog在blog文件夹内，输入并且回车终端命令npm install hexo-generator-feed --save进行安装。 然后在配置文件中输入代码：12345678910feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &apos; &apos; order_by: -date icon: icon.png 统计字数与阅读时长hexo-symbols-count-timehttps://github.com/theme-next/hexo-symbols-count-time npm install hexo-symbols-count-time –save 本地搜索searchdbhttps://github.com/theme-next/hexo-generator-searchdb 安装命令12npm install hexo-generator-searchdb --savenpm install hexo-generator-search --save 修改站点配置文件：在==站点==配置文件中，添加下面的配置信息: 12345search: path: search.xml field: post format: html limit: 10000 修改==Next主题==配置文件：找到local_search配置项，把enable改为true即可。 12local_search: enable: true markdown增强：hexo-renderer-markdown-it-plus安装使用命令^markdown npm un hexo-renderer-marked –savenpm i hexo-renderer-markdown-it-plus –save 站点配置在站点配置中任意空白处加入这些代码：12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ pre_class: highlight 高级功能：关闭一些不想用的插件因为这个插件是默认安装了很多其他的插件plugins enabled by default:1234567891011markdown-it-emojimarkdown-it-submarkdown-it-supmarkdown-it-deflistmarkdown-it-abbrmarkdown-it-footnotemarkdown-it-insmarkdown-it-mark@iktakahiro/markdown-it-katexmarkdown-it-toc-and-anchor 所以，你可以选择性的关闭 高级功能：安装其他插件Add other markdown-it PluginsIf you want to add a plugin named as markdown-it-something: Install this plugin；使用以下代码命令安装插件 1npm install markdown-it-something --save config main hexo _config.yml；在站点配置文件中自定义配置 12345678markdown_it_plus: # ... plugins: - plugin: name: markdown-it-something enable: true options: # this is plugin option 主要特性&amp;常用Markdown语言 Support for Markdown Extensive configuration Faster than the default renderer | hexo-renderer-marked sub, 下标：H~2~0 H~2~0 sup, 上标：x^2^ x^2 ins, 插入下划线：++Inserted++ ++Inserted++, ~~Del~~ Del Katex, 数学公式^math：$\sqrt{3x-1}+(1+x)^2$ emoji, 表情： toc&amp;anchor 目录：@[toc] deflist abbr 缩写：*[HTML]: Hyper Text Markup Language footnote 页脚、脚注：[^1] [^1]: mark 标记：==marked== =&gt; &lt;mark&gt;inserted&lt;/mark&gt; ==marked== =&gt; inserted jquery-backstretch安装Installation Download/save the JS file from GitHub.先在github下载此代码（https://github.com/jquery-backstretch/jquery-backstretch） 安装bower，因为下面要用bower命令安装jquery-backstretch Install via Bower with the following command.用下面的命令安装jquery-backstretch1bower install jquery-backstretch 报错1我没有想到，在这里用了一个代码$\sqrt{3x-1}+(1+x)^2$，然后我的页面宽度极具扩大！本来博客页面只有上下滚动的嘛，后来，因为宽度扩大，导致我的页面还可以左右动，非常宽。真是bug 虽然目前不常用数学公式，但是未必未来不用，毕竟理科生，latex、katex可能未来还是要用到的，如果在博客用这些公式出现了差错，就有迹可循了。因为我把这个代码放到了无序列表中一项内容的后面，然后sqrt这个根的上部分就一直..一直…..往右..延长…… 所以，以后要检查、排除一下差错，不要放到无序列表，或者，背景用的代码加上一句width:xxxxxpx{ width: 1080, url: &quot;path/to/image1_1080.jpg&quot; }]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>博客</tag>
        <tag>个性化</tag>
        <tag>插件</tag>
        <tag>NEXT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习一种新的语言吧！HTML学习记录笔记（二）]]></title>
    <url>%2Fpost%2F31045.html</url>
    <content type="text"><![CDATA[主要讲了html标签 @[TOC] HTML图像HTML图像三个标签 标签 描述 &lt;img&gt; 定义图像 &lt;map&gt; 定义图像地图 点击查看map详细属性 &lt;area&gt; 定义图像地图中的可点击区域 图像标签&lt;img&gt;，及源属性（Src） 在 HTML 中，图像由&lt;img&gt; 标签定义。&lt;img&gt;是空标签，意思是说，它只包含属性，并且没有闭合标签。要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。 从技术上讲，图像并不会插入 HTML 页面中，而是链接到 HTML 页面上。&lt;img&gt; 标签的作用是为被引用的图像创建占位符。 定义图像的语法是：&lt;img src=&quot;url&quot; alt=&quot;some_text&quot;&gt; URL 指存储图像的位置。如果名为 “pulpit.jpg” 的图像位于 www.runoob.com 的 images 目录中，那么其 URL 为 http://www.runoob.com/images/pulpit.jpg。 浏览器将图像显示在文档中图像标签出现的地方。如果你将图像标签置于两个段落之间，那么浏览器会首先显示第一个段落，然后显示图片，最后显示第二段。 img标签alt属性 alt 属性用来为图像定义一串预备的、可替换的文本。 替换文本属性的值是用户定义的。&lt;img src=&quot;boat.gif&quot; alt=&quot;Big Boat&quot;&gt; 在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。 此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。 img标签属性高度height与宽度width height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素: &lt;img src=&quot;pulpit.jpg&quot; alt=&quot;Pulpit rock&quot; width=&quot;304&quot; height=&quot;228&quot;&gt; 指定图像的高度和宽度是一个很好的习惯。如果图像指定了高度宽度，页面加载时就会保留指定的尺寸。如果没有指定图片的大小，加载页面时有可能会破坏HTML页面的整体布局。 假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。 加载页面时，要注意插入页面图像的路径，如果不能正确设置图像的位置，浏览器无法加载图片，图像标签就会显示一个破碎的图片。 img属性usemap usemap值为#mapname，作用是将图像定义为客户器端图像映射即：&lt;img usemap=&quot;#mapname&quot;&gt; 点我看img-usemap的示例 &lt;map&gt; 标签 &lt;map&gt; 标签用于客户端图像映射。图像映射指带有可点击区域的一幅图像。（map只有name/id这些命名的属性哦！） &lt;img&gt;中的 usemap 属性可引用 &lt;map&gt;中的 id 或 name 属性（取决于浏览器），所以我们应同时向&lt;map&gt;添加 id 和 name 属性。 &lt;img&gt;标签中的 usemap 属性与 &lt;map&gt;元素中的 name 相关联，以创建图像与映射之间的关系。 点我看用map-name、img-usemap的示例如下面代码中，用到了map标签，和img的属性usemap：1234567&lt;img src=&quot;planets.gif&quot; width=&quot;145&quot; height=&quot;126&quot; alt=&quot;Planets&quot; usemap=&quot;#planetmap&quot;&gt;&lt;map name=&quot;planetmap&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;0,0,82,126&quot; alt=&quot;Sun&quot; href=&quot;sun.htm&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;90,58,3&quot; alt=&quot;Mercury&quot; href=&quot;mercur.htm&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;124,58,8&quot; alt=&quot;Venus&quot; href=&quot;venus.htm&quot;&gt;&lt;/map&gt; HTML &lt;area&gt;标签 &lt;area&gt;标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。&lt;area&gt;元素始终嵌套在&lt;map&gt; 标签内部。 点我看用map-name、img-usemap/src/width/height、area-shape/coords/alt/href的示例在 HTML 中，&lt;area&gt;标签没有结束标签。1234567&lt;img src=&quot;planets.gif&quot; width=&quot;145&quot; height=&quot;126&quot; alt=&quot;Planets&quot; usemap=&quot;#planetmap&quot;&gt;&lt;map name=&quot;planetmap&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;0,0,82,126&quot; alt=&quot;Sun&quot; href=&quot;sun.htm&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;90,58,3&quot; alt=&quot;Mercury&quot; href=&quot;mercur.htm&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;124,58,8&quot; alt=&quot;Venus&quot; href=&quot;venus.htm&quot;&gt;&lt;/map&gt; 如上述代码中，用到了area，其中，shape指的是点击区域的形状，coords指的应该是链接区域在图片中的坐标（像素为单位） 矩形：左上角顶点坐标为(x1,y1)，右下角顶点坐标为(x2,y2) 1&lt;area shape=&quot;rect&quot; coords=&quot;x1,y1,x2,y2&quot; href=url&gt; 圆形：圆心坐标为(x1,y1)，半径为r 1&lt;area shape=&quot;circle&quot; coords=&quot;x1,y1,r&quot; href=url&gt; 多边形：各顶点坐标依次为(x1,y1)、(x2,y2)、(x3,y3) …… 1&lt;area shape=&quot;poly&quot; coords=&quot;x1,y1,x2,y2 ......&quot; href=url&gt; 点我看area的多种属性 在文字中排列图片源码123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h4&gt;默认对齐的图像 (align=&quot;bottom&quot;):&lt;/h4&gt;&lt;p&gt;这是一些文本。 &lt;img src=&quot;smiley.gif&quot; alt=&quot;Smiley face&quot; width=&quot;32&quot; height=&quot;32&quot;&gt; 这是一些文本。&lt;/p&gt;&lt;h4&gt;图片使用 align=&quot;middle&quot;:&lt;/h4&gt;&lt;p&gt;这是一些文本。 &lt;img src=&quot;smiley.gif&quot; alt=&quot;Smiley face&quot; align=&quot;middle&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;这是一些文本。&lt;/p&gt;&lt;h4&gt;图片使用 align=&quot;top&quot;:&lt;/h4&gt;&lt;p&gt;这是一些文本。 &lt;img src=&quot;smiley.gif&quot; alt=&quot;Smiley face&quot; align=&quot;top&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;这是一些文本。&lt;/p&gt;&lt;p&gt;&lt;b&gt;注意:&lt;/b&gt;在HTML 4中 align 属性已废弃，HTML5 已不支持该属性，可以使用 CSS 代替。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 以上用了style align:middle/top/bottom(默认) 创建图片链接。参考：HTML之创建图片链接示例。 创建图像映射源码123456789&lt;p&gt;点击太阳或其他行星，注意变化：&lt;/p&gt;&lt;img src=&quot;planets.gif&quot; width=&quot;145&quot; height=&quot;126&quot; alt=&quot;Planets&quot; usemap=&quot;#planetmap&quot;&gt;&lt;map name=&quot;planetmap&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;0,0,82,126&quot; alt=&quot;Sun&quot; href=&quot;sun.htm&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;90,58,3&quot; alt=&quot;Mercury&quot; href=&quot;mercur.htm&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;124,58,8&quot; alt=&quot;Venus&quot; href=&quot;venus.htm&quot;&gt;&lt;/map&gt; 浮动图片源码1234567&lt;p&gt;&lt;img src=&quot;smiley.gif&quot; alt=&quot;Smiley face&quot; style=&quot;float:left&quot; width=&quot;32&quot; height=&quot;32&quot;&gt; 一个带图片的段落，图片浮动在这个文本的左边。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;smiley.gif&quot; alt=&quot;Smiley face&quot; style=&quot;float:right&quot; width=&quot;32&quot; height=&quot;32&quot;&gt; 一个带图片的段落，图片浮动在这个文本的右边。&lt;/p&gt; 以上用了style float:left/right HTML表格 表格由 &lt;table&gt; 标签来定义。每个表格均有若干行（由 &lt;tr&gt; 标签定义），每行被分割为若干单元格（由 &lt;td&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。 HTML表格标签 标签 描述 &lt;table&gt; 定义表格 &lt;th&gt; 定义表格的表头 &lt;tr&gt; 定义表格的行 &lt;td&gt; 定义表格单元 &lt;caption&gt; 定义表格标题 &lt;colgroup&gt; 定义表格列的组 &lt;col&gt; 定义用于表格列的属性 &lt;thead&gt; 定义表格的页眉 &lt;tbody&gt; 定义表格的主体 &lt;tfoot&gt; 定义表格的页脚 1234567891011121314151617181920212223242526272829303132333435&lt;p&gt;每个表格从一个 table 标签开始。每个表格行从 tr 标签开始。每个表格的数据从 td 标签开始。&lt;/p&gt;&lt;h4&gt;一列:&lt;/h4&gt;&lt;table border=&quot;11&quot;&gt;&lt;tr&gt; &lt;td&gt;100&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;一行三列:&lt;/h4&gt;&lt;table border=&quot;21&quot;&gt;&lt;tr&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;200&lt;/td&gt; &lt;td&gt;300&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;两行三列:&lt;/h4&gt;&lt;table border=&quot;12&quot;&gt;&lt;tr&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;200&lt;/td&gt; &lt;td&gt;300&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;400&lt;/td&gt; &lt;td&gt;500&lt;/td&gt; &lt;td&gt;600&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表格边框属性border 如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。 123456&lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;Row 1, cell 1&lt;/td&gt; &lt;td&gt;Row 1, cell 2&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格表头属性th 表格的表头使用 标签进行定义。大多数浏览器会把表头显示为粗体居中的文本： 1234567891011121314&lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;Header 1&lt;/th&gt; &lt;th&gt;Header 2&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;row 1, cell 1&lt;/td&gt; &lt;td&gt;row 1, cell 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;row 2, cell 1&lt;/td&gt; &lt;td&gt;row 2, cell 2&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 示例1：跨两行、跨两列的单元格12345678910111213141516171819202122232425262728&lt;h4&gt;单元格跨两格:&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th colspan=&quot;2&quot;&gt;Telephone&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;td&gt;555 77 855&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;单元格跨两列:&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt; &lt;th&gt;First Name:&lt;/th&gt; &lt;td&gt;Bill Gates&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;Telephone:&lt;/th&gt; &lt;td&gt;555 77 854&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;555 77 855&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 示例2：表格内加标签12345678910111213141516171819202122232425262728293031&lt;table border=&quot;1&quot;&gt;&lt;tr&gt; &lt;td&gt; &lt;p&gt;这是一个段落&lt;/p&gt; &lt;p&gt;这是另一个段落&lt;/p&gt; &lt;/td&gt; &lt;td&gt;这个单元格包含一个表格: &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;A&lt;/td&gt; &lt;td&gt;B&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C&lt;/td&gt; &lt;td&gt;D&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;这个单元格包含一个列表 &lt;ul&gt; &lt;li&gt;apples&lt;/li&gt; &lt;li&gt;bananas&lt;/li&gt; &lt;li&gt;pineapples&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt; &lt;td&gt;HELLO&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 示例3：使用 Cell padding 调整单元格边距 创建单元格内容与其边框之间的空白、增加单元格之间的距离。 1234567891011121314151617181920212223242526272829303132333435&lt;h4&gt;没有单元格间距:&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;单元格间距=&quot;0&quot;:&lt;/h4&gt;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;单元格间距=&quot;10&quot;:&lt;/h4&gt;&lt;table border=&quot;1&quot; cellspacing=&quot;10&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; HTML列表列表标签ol/ul/li/dl/dt/dd 标签 描述 ol 定义有序列表 ul 定义无序列表 li 定义列表项 dl 定义列表 dt 自定义列表项目 dd 定义自定列表项的描述 有序列表 有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 &lt;ol&gt; 标签。每个列表项始于 &lt;li&gt;标签。列表项使用数字来标记。1234&lt;ol&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; 无序列表 无序列表是一个项目的列表,无序列表使用 &lt;ul&gt; 标签。此列项目使用粗体圆点（典型的小黑圆圈）进行标记。 1234&lt;ul&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt; 嵌套列表123456789101112131415&lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea &lt;ul&gt; &lt;li&gt;Black tea&lt;/li&gt; &lt;li&gt;Green tea &lt;ul&gt; &lt;li&gt;China&lt;/li&gt; &lt;li&gt;Africa&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt; 自定义列表 自定义列表不仅仅是一列项目，而是项目及其注释的组合。自定义列表以 &lt;dl&gt;标签开始。自定义列表项以&lt;dt&gt;开始。自定义列表项的定义以 &lt;dd&gt; 开始。 1234567&lt;h4&gt;一个自定义列表：&lt;/h4&gt;&lt;dl&gt; &lt;dt&gt;Coffee&lt;/dt&gt; &lt;dd&gt;- black hot drink&lt;/dd&gt; &lt;dt&gt;Milk&lt;/dt&gt; &lt;dd&gt;- white cold drink&lt;/dd&gt;&lt;/dl&gt; HTML区块HTML分组标签 标签 描述 &lt;div&gt; 定义了文档的区域，块级 (block-level) &lt;span&gt; 用来组合文档中的行内元素， 内联元素(inline) HTML区块元素 大多数 HTML 元素被定义为块级元素或内联元素。块级元素在浏览器显示时，通常会以新行来开始（和结束）。 实例: &lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt; HTML 内联元素 内联元素在显示时通常不会以新行开始。实例: &lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt; &lt;div&gt; 块级元素 HTML &lt;div&gt;元素是块级元素，它可用于组合其他 HTML 元素的容器。&lt;div&gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。 &lt;div&gt; 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。常用于： 组合块级元素，以便通过 CSS 来对这些元素进行格式化,与 CSS 一同使用，&lt;div&gt;元素可用于对大的内容块设置样式属性。 文档布局。它取代了使用表格定义布局的老式方法。使用 &lt;table&gt; 元素进行文档布局不是表格的正确用法。&lt;table&gt;元素的作用是显示表格化的数据。12345678&lt;p&gt;这是一些文本。&lt;/p&gt;&lt;div style=&quot;color:#0000FF&quot; align=right&gt; &lt;h3&gt;这是一个在 div 元素中的标题。&lt;/h3&gt; &lt;p&gt;这是一个在 div 元素中的文本。&lt;/p&gt;&lt;/div&gt;&lt;p&gt;这是一些文本。&lt;/p&gt; 显示如下： 属性align 属性 值 align left right center justify &lt;span&gt; 内联元素 HTML &lt;span&gt; 元素是内联元素，可用作文本的容器。&lt;span&gt; 元素也没有特定的含义。 当与 CSS 一同使用时，&lt;span&gt;元素可用于为部分文本设置样式属性。使用 元素对文本中的一部分进行着色： 我的母亲有 蓝色 的眼睛，我得父亲有 碧绿色 的眼睛。 1&lt;p&gt;我的母亲有 &lt;span style=&quot;color:blue;font-weight:bold&quot;&gt;蓝色&lt;/span&gt; 的眼睛，我得父亲有 &lt;span style=&quot;color:darkolivegreen;font-weight:bold&quot;&gt;碧绿色&lt;/span&gt; 的眼睛。&lt;/p&gt; 被 &lt;span&gt;元素包含的文本，可以使用 CSS 对它定义样式，或者使用 JavaScript 对它进行操作。]]></content>
      <categories>
        <category>语言语法</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习CSS自定义样式，让博客焕然一新（四）]]></title>
    <url>%2Fpost%2F39396.html</url>
    <content type="text"><![CDATA[咳咳，一篇笔记，还是不要超过800行的好，太长了，也看不赢，书写的工具也折腾不起~所以，学习css，就这样持续到了第四章~ 第三章里面，我们主要学了伪类、伪元素、导航栏、下拉菜单、提示工具、图像透明度。接下来要讲属性选择器、边框、背景、渐变、文本效果、过渡。 目录如下：@[TOC] 属性选择器具有特定属性的HTML元素样式具有特定属性的HTML元素样式不仅仅是class和id。 注意：IE7和IE8需声明!DOCTYPE才支持属性选择器！IE6和更低的版本不支持属性选择器。 属性选择器下面的例子是把包含标题（title）的所有元素变为蓝色：1234[title]&#123; color:blue;&#125; 属性和值选择器下面的实例改变了标题title=’runoob’元素的边框样式:1234[title=runoob]&#123; border:5px solid green;&#125; 属性和值的选择器:多值下面是包含指定值的title属性的元素样式的例子，使用（~）分隔属性和值:1[title~=hello] &#123; color:blue; &#125; 下面是包含指定值的lang属性的元素样式的例子，使用（|）分隔属性和值:1[lang|=en] &#123; color:blue; &#125; 表单样式属性选择器样式无需使用class或id的形式:12345678910111213input[type=&quot;text&quot;]&#123; width:150px; display:block; margin-bottom:10px; background-color:yellow;&#125;input[type=&quot;button&quot;]&#123; width:120px; margin-left:35px; display:block;&#125; 边框用 CSS3，你可以创建圆角边框，添加阴影框，并作为边界的形象而不使用设计程序，如 Photoshop。 在本章中，您将了解以下的边框属性： border-radiusbox-shadowborder-image 属性 说明 border-image 设置所有边框图像的速记属性。 border-radius 一个用于设置所有四个边框- -半径属性的速记属性 box-shadow 附加一个或多个下拉框的阴影 border-radius圆角在 CSS2 中添加圆角棘手。我们不得不在每个角落使用不同的图像。在 CSS3 中，很容易创建圆角。在 CSS3 中 border-radius 属性被用于创建圆角： 这是圆角边框！1234567在div中添加圆角元素：div&#123;border:2px solid;border-radius:25px;&#125; box-shadow盒阴影CSS3 中的 box-shadow 属性被用来添加阴影:在div中添加box-shadow属性1234div&#123;box-shadow: 10px 10px 5px #888888;&#125; border-image边界图片有了 CSS3 的 border-image 属性，你可以使用图像创建一个边框： border-image 属性允许你指定一个图片作为边框！ 用于创建上文边框的原始图像：在 div 中使用图片创建边框:123456div&#123;border-image:url(border.png) 30 30 round;-webkit-border-image:url(border.png) 30 30 round; /* Safari 5 and older */-o-border-image:url(border.png) 30 30 round; /* Opera */&#125; border-image属性默认值: none 100% 1 0 stretch 语法border-image: source slice width outset repeat|initial|inherit;值 |描述:-:|:-:border-image-source |用于指定要用于绘制边框的图像的位置border-image-source: none(没有图像被使用)|image(边框使用图像的路径);border-image-slice |图像边界向内偏移border-image-width |图像边界的宽度border-image-outset |用于指定在边框外部绘制 border-image-area 的量border-image-repeat |用于设置图像边界是否应重复（repeat）、拉伸（stretch）或铺满（round）。 border-image-slice指定图像的边界向内偏移语法border-image-slice: number|%|fill; 指定图像的边界向内偏移：12345div&#123;border-image-source: url(border.png);border-image-slice: 50% 50%;&#125; 注意: 此属性指定==顶部，右，底部，左边缘==的图像向内偏移，分为九个区域：四个角，四边和中间。图像中间部分将被丢弃（完全透明的处理），除非填写关键字。如果省略第四个数字/百分比，它和第二个相同的。如果也省略了第三个，它和第一个是相同的。如果也省略了第二个，它和第一个是相同的。 border-image-outset在边框外部绘制语法border-image-outset: length(设置边框图像与边框（border-image）的距离，默认为0。)|number(代表相应的 border-width 的倍数);border-image-outset用于指定在边框外部绘制 border-image-area 的量,包括上下部和左右部分。如果第四个值被省略，它和第二个是相同的。如果也省略了第三个，它和第一个是相同的。如果也省略了第二个，它和第一个是相同的。不允许border-im-outset拥有负值。设置border-img-outset属性： 12345div&#123; border-image-source: url(border.png); border-image-outset: 30 30;&#125; border-image-repeat重复图像的方式设置重复图像的方式：1234div &#123; border-image-source: url(border.png); border-image-repeat: repeat;&#125; border-image-repeat 属性用于图像边界是否应重复（repeated）、拉伸（stretched）或铺满（rounded）。 语法：border-image-repeat: stretch（默认值。拉伸图像来填充区域）|repeat（平铺（repeated）图像来填充区域。）|round（类似 repeat 值。如果无法完整平铺所有图像，则对图像进行缩放以适应区域。）|space（类似 repeat 值。如果无法完整平铺所有图像，扩展空间会分布在图像周围）|initial|inherit; 背景CSS3中包含几个新的背景属性，提供更大背景元素控制。 在本章您将了解以下背景属性： background-imagebackground-sizebackground-originbackground-clip background-image添加背景图片CSS3中可以通过background-image属性添加背景图片。 不同的背景图像和图像用逗号隔开，所有的图片中显示在最顶端的为第一张。12345#example1 &#123; background-image: url(img_flwr.gif), url(paper.gif); background-position: right bottom, left top; background-repeat: no-repeat, repeat;&#125; 可以给不同的图片设置多个不同的属性123#example1 &#123; background: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;&#125; background-size背景图像的大小background-size指定背景图像的大小。CSS3以前，背景图像大小由图像的实际大小决定。 CSS3中可以指定背景图片，让我们重新在不同的环境中指定背景图片的大小。您可以指定像素或百分比大小。 你指定的大小是相对于父元素的宽度和高度的百分比的大小。123456div&#123; background:url(img_flwr.gif); background-size:80px 60px; background-repeat:no-repeat;&#125; 伸展背景图像完全填充内容区域：123456div&#123; background:url(img_flwr.gif); background-size:100% 100%; background-repeat:no-repeat;&#125; background-Origin背景图像的位置区域background-Origin属性指定了背景图像的位置区域。 content-box, padding-box,和 border-box区域内可以放置背景图像。123456789在 content-box 中定位背景图片：div&#123; background:url(img_flwr.gif); background-repeat:no-repeat; background-size:100% 100%; background-origin:content-box;&#125; 多个背景图像CSS3 允许你在元素上添加多个背景图像。 在 body 元素中设置两个背景图像：1234body&#123; background-image:url(img_flwr.gif),url(img_tree.gif);&#125; background-clip背景剪裁CSS3中background-clip背景剪裁属性是从指定位置开始绘制123456#example1 &#123; border: 10px dotted black; padding: 35px; background: yellow; background-clip: content-box;&#125; 语法background-clip: border-box(默认值。背景绘制在边框方框内（剪切成边框方框）。)|padding-box(背景绘制在衬距方框内（剪切成衬距方框）。)|content-box(背景绘制在内容方框内（剪切成内容方框）。); 渐变（Gradients）CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的时间和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。CSS3 定义了两种类型的渐变（gradients）： 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向 径向渐变（Radial Gradients）- 由它们的中心定义 linear-gradient线性渐变为了创建一个线性渐变，你必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以设置一个起点和一个方向（或一个角度）。语法background: linear-gradient(direction, color-stop1, color-stop2, ...); 线性渐变-从上到下（默认情况下）从顶部开始的线性渐变。起点是红色，慢慢过渡到蓝色：从上到下的线性渐变：123#grad &#123; background: linear-gradient(red, blue); /* 标准的语法 */&#125; 线性渐变-从左到右to right下面的实例演示了从左边开始的线性渐变。起点是红色，慢慢过渡到蓝色：从左到右的线性渐变：123#grad &#123; background: linear-gradient(to right, red , blue); /* 标准的语法 */&#125; 线性渐变-对角to bottom right你可以通过指定水平和垂直的起始位置来制作一个对角渐变。从左上角开始（到右下角）的线性渐变。起点是红色，慢慢过渡到蓝色：从左上角到右下角的线性渐变： 123#grad &#123; background: linear-gradient(to bottom right, red , blue); /* 标准的语法 */&#125; xxdeg使用角度如果你想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。 语法background: linear-gradient(angle, color-stop1, color-stop2);角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。 xx%使用多个颜色结点下面的实例演示了如何设置多个颜色结点：带有多个颜色结点的从上到下的线性渐变：123#grad &#123; background: linear-gradient(red, green, blue); /* 标准的语法 */&#125; 创建一个带有彩虹颜色和文本的线性渐变：12345678910111213&lt;style&gt;#grad1 &#123; height: 55px; background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); /* 标准的语法（必须放在最后） */&#125;&lt;/style&gt;&lt;body&gt;&lt;div id=&quot;grad1&quot; style=&quot;text-align:center;margin:auto;color:#888888;font-size:40px;font-weight:bold&quot;&gt;渐变背景&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; Internet Explorer 9 及之前的版本不支持渐变。&lt;/p&gt; rgba()使用透明度（transparent）CSS3 渐变也支持透明度（transparent），可用于创建减弱变淡的效果。 为了添加透明度，我们使用rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。 下面的实例演示了从左边开始的线性渐变。起点是完全透明，慢慢过渡到完全不透明的红色：1234567891011121314&lt;style&gt;#grad1 &#123; height: 200px; background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); /* 标准的语法（必须放在最后） */&#125;&lt;/style&gt;&lt;body&gt;&lt;h3&gt;线性渐变 - 透明度&lt;/h3&gt;&lt;p&gt;为了添加透明度，我们使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。&lt;/p&gt;&lt;div id=&quot;grad1&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; Internet Explorer 9 及之前的版本不支持渐变。&lt;/p&gt; repeating-linear-gradient()重复的线性渐变repeating-linear-gradient() 函数用于重复线性渐变：123#grad &#123; background: repeating-linear-gradient(red, yellow 10%, green 20%);&#125; radial-gradient径向渐变径向渐变由它的中心定义。 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下: 渐变的中心是 center（表示在中心点）， 渐变的形状是 ellipse（表示椭圆形）， 渐变的大小是 farthest-corner（表示到最远的角落）。语法background: radial-gradient(center, shape size, start-color, ..., last-color); 径向渐变 - 颜色结点均匀分布（默认情况下）123#grad &#123; background: radial-gradient(red, green, blue); /* 标准的语法 */&#125; 颜色结点不均匀分布的径向渐变：123#grad &#123; background: radial-gradient(red 5%, green 15%, blue 60%); /* 标准的语法 */&#125; shape设置形状shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。 size不同尺寸大小关键字的使用size 参数定义了渐变的大小。它可以是以下四个值： closest-sidefarthest-sideclosest-cornerfarthest-corner repeating-radial-gradient()重复的径向渐变repeating-radial-gradient() 函数用于重复径向渐变 文本效果CSS3中包含几个新的文本特征。 在本章中您将了解以下文本属性： text-shadowbox-shadowtext-overflowword-wrapword-break 过渡CSS3中，我们为了添加某种效果可以从一种样式转变到另一个的时候，无需使用Flash动画或JavaScript。CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。 要实现这一点，必须规定两项内容： 指定要添加效果的CSS属性指定效果的持续时间。应用于宽度属性的过渡效果，时长为 2 秒：12345div&#123; transition: width 2s; -webkit-transition: width 2s; /* Safari */&#125; 如果未指定的期限，transition将没有任何效果，因为默认值是0。 指定的CSS属性的值更改时效果会发生变化。一个典型CSS属性的变化是用户鼠标放在一个元素上时：规定当鼠标指针悬浮(:hover)于 &lt;div&gt;元素上时：123456789101112131415161718div&#123; width:100px; height:100px; background:red; transition:width 2s; -webkit-transition:width 2s; /* Safari */&#125;div:hover&#123; width:300px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;b&gt;注意：&lt;/b&gt;该实例无法在 Internet Explorer 9 及更早 IE 版本上工作。&lt;/p&gt; 注意： 当鼠标光标移动到该元素时，它逐渐改变它原有样式 多项改变要添加多个样式的变换效果，添加的属性由逗号分隔：添加了宽度，高度和转换效果： 12345div&#123; transition: width 2s, height 2s, transform 2s; -webkit-transition: width 2s, height 2s, -webkit-transform 2s;&#125; 过渡属性下表列出了所有的过渡属性: 属性 描述 transition 简写属性，用于在一个属性中设置四个过渡属性。 transition-property 规定应用过渡的 CSS 属性的名称。 transition-duration 定义过渡效果花费的时间。默认是 0。 transition-timing-function 规定过渡效果的时间曲线。默认是 “ease”。 transition-delay 规定过渡效果何时开始。默认是 0。 123456789101112131415161718192021222324252627&lt;style&gt;div&#123; width:100px; height:100px; background:red; transition-property:width; transition-duration:1s; transition-timing-function:linear; transition-delay:2s;&#125;div:hover&#123; width:200px;&#125;&lt;/style&gt;&lt;body&gt;&lt;p&gt;&lt;b&gt;注意：&lt;/b&gt;该实例无法在 Internet Explorer 9 及更早 IE 版本上工作。&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;p&gt;鼠标移动到 div 元素上，查看过渡效果。&lt;/p&gt;&lt;p&gt;&lt;b&gt;注意：&lt;/b&gt; 过渡效果需要等待两秒后才开始。&lt;/p&gt;&lt;/body&gt; 与上面的例子相同的过渡效果，但是使用了简写的 transition 属性：1234div&#123; transition: width 1s linear 2s;&#125;]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天使爱美丽&La valse d'Amélie (Version origin)]]></title>
    <url>%2Fpost%2F9369.html</url>
    <content type="text"><![CDATA[我一直记得，大概，是大二的那一节历史课，或是马原课吧，我坐在后几排，在课堂上百无聊赖地拿出了手机刷着 刷手机，是许多人的常态了吧。 也应该是每一个学生必会的。 那天课上，我就这样明目张胆地拿出了手机，放在座位桌子上，虽然下方压着一本书，很明显地提示我：现在正在上课时间。然而，对历史政治课堂一直感到索然无味的我，觉得自己应该向周围同学”学习”：这课程“不重要”，玩玩手机才是“必修课”。]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>《天使爱美丽》</tag>
        <tag>电影</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“Lorem ipsum”之谜]]></title>
    <url>%2Fpost%2F32375.html</url>
    <content type="text"><![CDATA[“Lorem ipsum”以及后面跟着的一长串英文字母，想必大家都不陌生吧。那你有木有想过，它为何经常会在你面前刷好感度呢？ 什么？你不知道、没见过”Lorem ipsum”?好吧，那下面这几幅图和文字，你总该有些印象了吧？ 这是ppt模板上的一页：这是ibooks author上模板的前几页： Lorem ipsum dolor sit amet Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 1234567Lorem ipsum dolor sit amet, ligula suspendisse nulla pretium, rhoncus tempor placerat fermentum, enim integer ad vestibulum volutpat. Nisl rhoncus turpis est, vel elit, congue wisi enim nunc ultricies sit, magna tincidunt. Maecenas aliquam maecenas ligula nostra, accumsan taciti. Sociis mauris in integer, a dolor netus non dui aliquet, sagittis felis sodales, dolor sociis mauris, vel eu libero cras. Interdum at. Eget habitasse elementum est, ipsum purus pede porttitor class, ut adipiscing, aliquet sed auctor, imperdiet arcu per diam dapibus libero duis. Enim eros in vel, lorem ispum volutpat nec pellentesque leo, temporibus scelerisque nec. Ac dolor ac adipiscing amet bibendum nullam, massa lacus molestie ut libero nec, diam et, pharetra sodales eget, feugiat ullamcorper id tempor eget id vitae. Mauris pretium eget aliquet, lectus tincidunt. Porttitor mollis imperdiet lorem ipsum libero senectus pulvinar.Etiam molestie mauris ligula eget laoreet, vehicula eleifend. Repellat orci eget erat et, sem cum, ultricies sollicitudin amet eleifend dolor nullam erat, malesuada est leo ac. Varius natoque turpis elementum est. Massa lacus molestie ut libero nec, diam et, pharetra sodales eget, feugiat ullamcorper id tempor eget id vitae. Mauris pretium eget aliquet, lectus tincidunt. Porttitor mollis imperdiet libero senectus pulvinar. Etiam molestie mauris ligula eget laoreet, vehicula eleifend. Repellat orci eget erat et, sem cum.Lorem ipsum dolor sit amet, ligula suspendisse nulla pretium, rhoncus tempor placerat fermentum, enim integer ad vestibulum volutpat. Nisl rhoncus turpis est, vel elit, congue wisi enim nunc ultricies sit, magna tincidunt. Maecenas aliquam maecenas ligula nostra, accumsan taciti. Sociis mauris in integer, a dolor netus non dui aliquet, sagittis felis sodales, dolor sociis mauris, vel eu est libero cras. Interdum at. Eget habitasse elementum est, ipsum purus pede porttitor class, ut lorem adipiscing, aliquet sed auctor, imperdiet arcu per diam dapibus libero duis. Enim eros in vel, volutpat nec pellentesque leo, temporibus scelerisque nec.Ac dolor ac adipiscing amet bibendum nullam, massa lacus molestie ut libero nec, diam et, pharetra sodales eget, feugiat ullamcorper id tempor eget id vitae. Mauris pretium eget aliquet, lectus tincidunt. Porttitor mollis imperdiet libero senectus pulvinar. Etiam molestie mauris ligula eget laoreet, vehicula eleifend. Repellat orci eget erat et, sem cum, ultricies sollicitudin amet eleifend dolor nullam erat, malesuada est leo ac.Varius natoque turpis elementum est. Duis montes, tellus lobortis lacus amet arcu et. In vitae vel, wisi at, id praesent bibendum libero faucibus porta egestas, quisque praesent ipsum fermentum placerat tempor. Curabitur auctor, erat mollis sed fusce, turpis vivamus a dictumst congue magnis. Aliquam amet ullamcorper dignissim molestie, sed mollis. Tortor vitae tortor eros wisi facilisis. Consectetuer arcu ipsum ornare pellentesque vehicula, in vehicula diam, ornare magna erat felis wisi a risus. Justo fermentum id. Malesuada eleifend, tortor molestie, a fusce a vel et. Mauris at suspendisse, neque aliquam faucibus adipiscing, vivamus in. Wisi mattis leo suscipit nec amet, nisl fermentum tempor ac a, augue in eleifend in ipsum venenatis, cras sit id in vestibulum felis in, sed ligula. In sodales suspendisse mauris quam etiam erat, quia tellus convallis eros rhoncus diam orci, porta lectus esse adipiscing posuere et, nisl arcu vitae laoreet. Morbi integer molestie, amet suspendisse morbi, amet maecenas, a maecenas mauris neque proin nisl mollis.Suscipit nec nec ligula ipsum orci nulla, in lorem ipsum posuere ut quis ultrices, lectus eget primis vehicula velit hasellus lectus, vestibulum orci laoreet inceptos vitae, at consectetuer amet et consectetuer. Congue porta scelerisque praesent at, lacus vestibulum et at dignissim cras urna, ante convallis turpis duis lectus sed aliquet, at tempus et ultricies. Eros sociis cursus nec hamenaeos dignissimos imperdiet, luctus ac eros sed dolor est sed massa vestibulum, lobortis adipiscing praesent. Nec eros eu ridiculus libero felis.Donec arcu risus diam amet sit. Congue tortor cursus risus vestibulum commodo nisl, luctus augue amet quis aenean maecenas sit, donec velit iusto, morbi felis elit et nibh. Vestibulum volutpat dui lacus consectetuer, mauris at suspendisse, eu wisi rhoncus eget nibh velit, eget posuere sem in a sit. Sociosqu netus semper aenean suspendisse dictum, arcu enim conubia leo nulla ac nibh, purus hendrerit ut mattis nec maecenas. 前言怎么样，看了上面的图片与文字，是不是想起来了，是否曾经见过这样的英文？尤其是开头的”Lorem ipsum”😝 我就经常能够在Microsoft office的软件中见到它，尤其是我需要选择一个好看的PPT模板时，我就会不停地找啊、看啊，其中的文本框、标题框里面的字，啧啧，经常就是同一段以”Lorem ipsum”开头的文字。 然而，我熟悉了近4年的”Lorem ipsum”，却从未想过它是什么意思，很少有那么强烈地想要了解它的欲望，以为出现在不同的模板中”Lorem ipsum”，甚至不同软件中的”Lorem ipsum”都只是一种巧合？ 我曾经还暗暗地想，这用英文写的，难不成是英语？可是，上面的单词我一个也不认识耶，学了这么久的英语，感觉白学了…这深深打击到了我学英语的自信心。 不扯远了。话说，我今天在看css时，突然就发现了它的中文名，真是猿粪！ 于是，它成功的引起了我的注意~ 什么是”Lorem ipsum”经过我们强大的度娘得知”Lorem ipsum”，叫做“乱数假文”。 中文百科：Lorem ipsum是指一篇常用于排版设计领域的拉丁文文章，主要的目的为测试文章或文本在不同字体、版型下看起来的效果。中文的类似用法则称为乱数假文、随机假文。 应用：Lorem ipsum从15世纪开始就被广泛地使用在西方的印刷、设计领域中，在电脑排版盛行之后，这段被传统印刷产业使用几百年的无意义文本又再度流行。由于这段文本以「Lorem ipsum」起头，并且常被用于标题的测试中，所以一般称为Lorem ipsum，简称为Lipsum。 意义：原先大家以为这段拉丁文只是没有意义的组合，==目的是让阅读者不要被文章内容所影响，而只专注于观察字体或版型，并借此填满空间。== 但根据美国拉丁学者Richard McClintock的研究，Lorem ipsum原来起源于西赛罗《善恶之尽》（De finibus bonorum et malorum）第一章（Liber Primus）的32、33两节：“Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit “，进行了混排，就把它创造出来了。这句拉丁文的英译是 “Neither is there anyone who loves grief itself since it is grief and thus wants to obtain it”，译成中文就是”无人爱苦，亦无人寻之欲之，乃因其苦……” 为了减少Lorem ipsum的可读性，并且==让字母频率与现代英语接近==，所以有些版本中部分字母被K、W、Z等拉丁文中没有的字母替换，或是加入zzril、takimata等字。除了原始的Lorem ipsum版本外，网上还有==不同长度和不同语言==的版本可供使用。 它可能出现在哪里？Photoshop ^1在文本框中，选择 菜单-&gt;文字-&gt;粘贴 Lorem ipsum Lorem ipsum 对于设计人员可能会是比较常用的。 漫画《丁丁历险记》擦，我没有看过这个漫画~ 网页等模板 总结 叫法：乱数假文、随机假文 语言：这文字不是英语，而是拉丁文。 起源起因：为了专注观察字体或版型；填满空间；减少可读性；西塞罗《善恶之尽》。 用途：lorem ipsum这文字内容的主要用途就是，测试标题、文章、文本在不同字体、版型下看起来的效果。 兴衰：15世纪兴起于西方的传统印刷行业；电脑排版盛行后，开始进入电脑屏幕上作妖~。 想法嚯嚯，这货果然，内容并没有多大的意义。（我当初看不到这拉丁文，当然就不理解其含义，猜测它也是一种体现排版的工具，起到填充文本框的目的） 毕竟起源于西方，现在又由于电脑排版的盛行，让我们可以在ppt、word等排版、编辑软件中见到它。因为用途是测试文本效果，所以没有必要让它内容有含义，也就意味着，乱数文本只需一段无英语内容含义（降低，又可以看出英文排版效果的文字咯。所以，起源于西方的它，就是拉丁文。（不知道拉丁文的它，是不是真的来源于一段拉丁文书里面的文字呢！） 中文乱数假文应具备的特征特点想到这，我们可以类比一下，如果用的是”中文”呢？我们就需要一段汉字组成的乱数假文，它理应该具备以下特征： 可读性低。意味着文字不是像小说等文章、我们说出的话，那样流畅、有含义有背景的具体内容，要不然，大家的注意力都在文字上了，而不是排版上，这就与目的相违背了。 汉字频率与现代汉语接近。即我们常用的字，比如常说的“我”“是”“去”“的”“在”“人”，我们经常打字，打字候选框里头的字，也都是按照频率高低进行出现的，也就是这个道理。 使用汉字的其他语言。这个，就比较纠结了，要说使用汉字的人多嘛，这是真的。可这是因为我们中国人人口数量本来就庞大呀，也意味着汉字使用率还是我们国人优先。还有其他用汉字的语言吗？我看，不多呢。我熟悉过的日语，用的也只是部分为汉字，其中还有大部分是繁体字。我们反过来看英语，英语的英文几乎处处都有踪迹，所以西方以英语为母语的人，就以大部分也是英文的拉丁语作为乱数文本了，反正这拉丁语无英文的内容含义，可以大大降低可读性（不过，我有发现，国外经常有「拉丁语」语言的课程，那西方人是不是也普遍会拉丁语呢？我就不太清楚了）若是，我们用日语做乱数文本，其中很多的日文还是要删除或替换的吧？ 生成乱数文本So，啥时候可以见到一个生成“汉字”的乱数文本捏？ 当然啦，若是目前没有统一的汉字乱数文本，那我们就各自在文本框里面随意发挥咯~也就是随意用手打几个字，然后复制，粘贴，再复制，粘贴，形成一大段文本就好咯！ 目前，还有做lorem ipsum的网站呢！传送门（可能需要伴随VPN食用哟）： Lorem Ipsum：Lorem ipsum is placeholder text commonly used in the graphic, print, and publishing industries for previewing layouts and visual mockups.（常用于图形，印刷和出版行业的占位符文本，用于预览布局和可视化模型。） 亂數假文產生器 Chinese Lorem Ipsum 后来，还在word里面发现了两个函数： =rand() =lorem() 我们只需要在word里面键入其中之一，再回车，就可以生成随机文本了。第一个函数是生成中文（可以发现，并不是乱数，而是完整的语句）；第二个是生成英文。随君采撷 :smile: rand() 和 lorem() 都带有两个可选的参数，分别表示需要生成的段落数和每段的句数。例如=lorem(10,10)，表示生成一共 10 段，每段 10 句的文本。]]></content>
      <categories>
        <category>无法阻挡的好奇之心</category>
      </categories>
      <tags>
        <tag>好奇心爆棚</tag>
        <tag>Lorem ipsum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习CSS自定义样式，让博客焕然一新（三）]]></title>
    <url>%2Fpost%2F63269.html</url>
    <content type="text"><![CDATA[没想到啊，CSS内容还是很多~不过，坚持！👊应该这章就可以写完了~基础部分就会很扎实啦！基本上就可以达到看到css与html结合的样式，也能够分析90%以上啦~继续勤奋学习css吧~在第二章里面，我们学了css轮廓、外边距、填充、分组&amp;嵌套选择器、尺寸、显示与可见性、溢出、组合选择器、定位、对齐。接下来要学：伪类、伪元素、导航栏、下拉菜单、提示工具、图像透明度。 目录如下： @[TOC] CSS 伪类(Pseudo-classes)CSS伪类是用来添加一些选择器的特殊效果。 所有CSS伪类/元素 选择器 示例 示例说明 :link a:link 选择所有未访问链接 :visited a:visited 选择所有访问过的链接 :active a:active 选择正在活动链接 :hover a:hover 把鼠标放在链接上的状态 :focus input:focus 选择元素输入后具有焦点 :first-letter p:first-letter 选择每个&lt;p&gt; 元素的第一个字母 :first-line p:first-line 选择每个&lt;p&gt; 元素的第一行 :first-child p:first-child 选择器匹配属于任意元素的第一个子元素的 &lt;p&gt; 元素 :before p:before 在每个&lt;p&gt;元素之前插入内容 :after p:after 在每个&lt;p&gt;元素之后插入内容 :lang(language) p:lang(it) 为&lt;p&gt;元素的lang属性选择一个开始值 伪类的语法selector:pseudo-class {property:value;}CSS类也可以使用伪类：selector.class:pseudo-class {property:value;} anchor伪类在支持 CSS 的浏览器中，链接的不同状态都可以以不同的方式显示1234a:link &#123;color:#FF0000;&#125; /* 未访问的链接 */a:visited &#123;color:#00FF00;&#125; /* 已访问的链接 */a:hover &#123;color:#FF00FF;&#125; /* 鼠标划过链接 */a:active &#123;color:#0000FF;&#125; /* 已选中的链接 */ 注意： 在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。 注意： 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。 注意：伪类的名称不区分大小写。 伪类和CSS类伪类可以与 CSS 类配合使用：12a.red:visited &#123;color:#FF0000;&#125;&lt;a class=&quot;red&quot; href=&quot;css-syntax.html&quot;&gt;CSS 语法&lt;/a&gt; 如果在上面的例子的链接已被访问，它会显示为红色。 :first-child 伪类您可以使用 :first-child 伪类来选择父元素的第一个子元素。 注意：在IE8的之前版本必须声明&lt;!DOCTYPE&gt;，这样 :first-child 才能生效。 匹配第一个&lt;p&gt;元素在下面的例子中，选择器匹配作为任何元素的第一个子元素的&lt;p&gt; 元素：1234p:first-child&#123; color:blue;&#125; 匹配所有&lt;p&gt;元素中的第一个&lt;i&gt; 元素在下面的例子中，选择相匹配的所有&lt;p&gt;元素的第一个 &lt;i&gt;元素：1234p &gt; i:first-child&#123; color:blue;&#125; 匹配所有作为第一个子元素的&lt;p&gt; 元素中的所有&lt;i&gt;元素在下面的例子中，选择器匹配所有作为元素的第一个子元素的 &lt;p&gt; 元素中的所有 &lt;i&gt;元素：1234p:first-child i&#123; color:blue;&#125; :lang 伪类:lang 伪类使你有能力为不同的语言定义特殊的规则注意：IE8必须声明&lt;!DOCTYPE&gt;才能支持:lang伪类。在下面的例子中，:lang 类为属性值为 no 的q元素定义引号的类型：1q:lang(no) &#123;quotes: &quot;~&quot; &quot;~&quot;;&#125; 伪元素CSS伪元素是用来添加一些选择器的特殊效果。 伪元素的语法selector:pseudo-element {property:value;}CSS类也可以使用伪元素：selector.class:pseudo-element {property:value;} :first-line 伪元素“first-line” 伪元素用于向文本的首行设置特殊样式。 在下面的例子中，浏览器会根据 “first-line” 伪元素中的样式对 p 元素的第一行文本进行格式化： 12345p:first-line&#123; color:#ff0000; font-variant:small-caps;&#125; :first-letter 伪元素“first-letter” 伪元素用于向文本的首字母设置特殊样式：12345p:first-letter&#123; color:#ff0000; font-size:xx-large;&#125; 注意：&quot;first-line&quot;\ &quot;first-letter&quot; 伪元素只能用于块级元素。 注意： 下面的属性可应用于 &quot;first-line&quot; \ &quot;first-letter&quot; 伪元素： font propertiescolor propertiesbackground propertiesword-spacingletter-spacingtext-decorationvertical-aligntext-transformline-heightclear 伪元素和CSS类伪元素可以结合CSS类：123p.article:first-letter &#123;color:#ff0000;&#125;&lt;p class=&quot;article&quot;&gt;文章段落&lt;/p&gt; 上面的例子会使所有 class 为 article 的段落的首字母变为红色。 多个伪元素可以结合多个伪元素来使用。 在下面的例子中，段落的第一个字母将显示为红色，其字体大小为 xx-large。第一行中的其余文本将为蓝色，并以小型大写字母显示。 段落中的其余文本将以默认字体大小和颜色来显示：12345678910p:first-letter&#123; color:#ff0000; font-size:xx-large;&#125;p:first-line&#123; color:#0000ff; font-variant:small-caps;&#125; :before 伪元素:before 伪元素可以在元素的内容前面插入新内容。下面的例子在每个&lt;h1&gt;元素前面插入一幅图片：1234h1:before&#123; content:url(smiley.gif);&#125; :after 伪元素:after 伪元素可以在元素的内容之后插入新内容。 下面的例子在每个&lt;h1&gt;元素后面插入一幅图片：1234h1:after&#123; content:url(smiley.gif);&#125; 关于伪类、伪元素伪类选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫==伪类==。 与伪类针对特殊状态的元素不同的是，伪元素是对元素中的特定内容进行操作，它所操作的层次比伪类更深了一层，也因此它的动态性比伪类要低得多。实际上，设计伪元素的目的就是去==选取诸如元素内容第一个字（母）、第一行，选取某些内容前面或后面==这种普通的选择器无法完成的工作。它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫==伪元素==。 导航栏熟练使用导航栏，对于任何网站都非常重要。使用CSS你可以转换成好看的导航栏而不是枯燥的HTML菜单。==导航栏=链接列表==作为标准的HTML基础一个导航栏是必须的。在我们的例子中我们将建立一个标准的HTML列表导航栏。导航条基本上是一个链接列表，所以使用&lt;ul&gt; 和&lt;li&gt;元素非常有意义： 123456&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#home&quot;&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#news&quot;&gt;新闻&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;联系&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 现在，让我们从列表中删除边距和填充：12345ul &#123; list-style-type: none; margin: 0; padding: 0;&#125; 例子解析： list-style-type:none - 移除列表前小标志。一个导航栏并不需要列表标记 移除浏览器的默认设置将边距和填充设置为0上面的例子中的代码是垂直和水平导航栏使用的标准代码。 垂直导航栏上面的代码，我们只需要 &lt;a&gt;元素的样式，建立一个垂直的导航栏：12345a&#123; display:block; width:60px;&#125; 示例说明： display:block - 显示块元素的链接，让整体变为可点击链接区域（不只是文本），它允许我们指定宽度 width:60px - 块元素默认情况下是最大宽度。我们要指定一个60像素的宽度 注意： 请务必指定 &lt;a&gt;元素在垂直导航栏的的宽度。如果省略宽度，IE6可能产生意想不到的效果。 垂直导航条实例创建一个简单的垂直导航条实例，在鼠标移动到选项时，修改背景颜色：1234567891011121314151617181920ul &#123; list-style-type: none; margin: 0; padding: 0; width: 200px; background-color: #f1f1f1;&#125;li a &#123; display: block; color: #000; padding: 8px 16px; text-decoration: none;&#125;/* 鼠标移动到选项上修改背景颜色 */li a:hover &#123; background-color: #555; color: white;&#125; 激活/当前导航条实例在点击了选项后，我们可以添加&quot;active&quot;类来标准哪个选项被选中：1234.active &#123; background-color: #4CAF50; color: white;&#125; 创建链接并添加边框 可以在&lt;li&gt;or&lt;a&gt;上添加text-align:center 样式来让链接居中。 可以在 border &lt;ul&gt;上添加 border 属性来让导航栏有边框。如果要在每个选项上添加边框，可以在每个 &lt;li&gt; 元素上添加border-bottom : 123456789101112ul &#123; border: 1px solid #555;&#125;li &#123; text-align: center; border-bottom: 1px solid #555;&#125;li:last-child &#123; border-bottom: none;&#125; 全屏高度的固定导航条接下来我们创建一个左边是全屏高度的固定导航条，右边是可滚动的内容。12345678910ul &#123; list-style-type: none; margin: 0; padding: 0; width: 25%; background-color: #f1f1f1; height: 100%; /* 全屏高度 */ position: fixed; overflow: auto; /* 如果导航栏选项多，允许滚动 */&#125; 注意: 该实例可以在移动设备上使用。 水平导航栏有两种方法创建横向导航栏。使用内联(inline)或浮动(float)的列表项。 这两种方法都很好，但如果你想链接到==具有相同的大小==，你必须使用浮动的方法。 内联列表项建立一个横向导航栏的方法之一是指定元素， 下面代码是标准的内联:1234li&#123; display:inline;&#125; display:inline; -默认情况下，&lt;li&gt;元素是块元素。在这里，我们删除换行符之前和之后每个列表项，以显示一行。 浮动列表项在上面的（内联列表项）例子中链接有不同的宽度。 对于所有的链接宽度相等，浮动 &lt;li&gt;元素，并指定为&lt;a&gt;元素的宽度：123456789li&#123; float:left;&#125;a&#123; display:block; width:60px;&#125; 实例解析： float:left - 使用浮动块元素的幻灯片彼此相邻 display:block - 显示块元素的链接，让整体变为可点击链接区域（不只是文本），它允许我们指定宽度 width:60px - 块元素默认情况下是最大宽度。我们要指定一个60像素的宽度 水平导航条实例创建一个水平导航条，在鼠标移动到选项后修改背景颜色。123456789101112131415161718192021222324ul &#123; list-style-type: none; margin: 0; padding: 0; overflow: hidden; background-color: #333;&#125;li &#123; float: left;&#125;li a &#123; display: block; color: white; text-align: center; padding: 14px 16px; text-decoration: none;&#125;/*鼠标移动到选项上修改背景颜色 */li a:hover &#123; background-color: #111;&#125; 激活/当前导航条实例在点击了选项后，我们可以添加 “active” 类来标准哪个选项被选中：123.active &#123; background-color: #4CAF50;&#125; float:right;链接右对齐将导航条最右边的选项设置右对齐 (float:right;)：123456&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#home&quot;&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#news&quot;&gt;新闻&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;联系&lt;/a&gt;&lt;/li&gt; &lt;li style=&quot;float:right&quot;&gt;&lt;a class=&quot;active&quot; href=&quot;#about&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; border-right添加分割线&lt;li&gt;通过 border-right 样式来添加分割线:12345678/* 除了最后一个选项(last-child) 其他的都添加分割线 */li &#123; border-right: 1px solid #bbb;&#125;li:last-child &#123; border-right: none;&#125; 固定导航条可以设置页面的导航条固定在头部或者底部：固定在头部12345ul &#123; position: fixed; top: 0; width: 100%;&#125; 固定在底部12345ul &#123; position: fixed; bottom: 0; width: 100%;&#125; 注意: 该实例可以在移动设备上使用。 灰色水平导航条固定在底部12345678ul &#123; border: 1px solid #e7e7e7; background-color: #f3f3f3;&#125;li a &#123; color: #666;&#125; 下拉菜单使用 CSS 创建一个鼠标移动上去后显示下拉菜单的效果。 基本下拉菜单当鼠标移动到指定元素上时，会出现下拉菜单。123456789101112131415161718192021222324252627&lt;style&gt;.dropdown &#123; position: relative; display: inline-block;&#125;.dropdown-content &#123; display: none; position: absolute; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); padding: 12px 16px; z-index: 1;&#125;.dropdown:hover .dropdown-content &#123; display: block;&#125;&lt;/style&gt;&lt;div class=&quot;dropdown&quot;&gt; &lt;span&gt;Mouse over me&lt;/span&gt; &lt;div class=&quot;dropdown-content&quot;&gt; &lt;p&gt;Hello World!&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 实例解析 HTML 部分： 我们可以使用任何的 HTML 元素来打开下拉菜单，如：&lt;span&gt;, 或 a &lt;button&gt; 元素。 使用容器元素 (如：&lt;div&gt;) 来创建下拉菜单的内容，并放在任何你想放的位置上。 使用 &lt;div&gt; 元素来包裹这些元素，并使用 CSS 来设置下拉内容的样式。 CSS 部分： ==.dropdown== 类使用 position:relative,将设置下拉菜单的内容放置在下拉按钮 (使用position:absolute) 的右下角位置。 ==.dropdown-content== 类中是实际的下拉菜单。默认是隐藏的，在鼠标移动到指定元素后会显示。 注意 :min-width 的值设置为 160px。你可以随意修改它。如果你想设置下拉内容与下拉按钮的宽度一致，可设置 width 为 100% ( overflow:auto 设置可以在小尺寸屏幕上滚动)。 我们使用 box-shadow 属性让下拉菜单看起来像一个”卡片”。 :hover 选择器用于在用户将鼠标移动到下拉按钮上时显示下拉菜单。 下拉菜单创建下拉菜单，并允许用户选取列表中的某一项：这个实例类似前面的实例，当我们在下拉列表中添加了链接，并设置了样式：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;style&gt;/* 下拉按钮样式 */.dropbtn &#123; background-color: #4CAF50; color: white; padding: 16px; font-size: 16px; border: none; cursor: pointer;&#125;/* 容器 &lt;div&gt; - 需要定位下拉内容 */.dropdown &#123; position: relative; display: inline-block;&#125;/* 下拉内容 (默认隐藏) */.dropdown-content &#123; display: none; position: absolute; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);&#125;/* 下拉菜单的链接 */.dropdown-content a &#123; color: black; padding: 12px 16px; text-decoration: none; display: block;&#125;/* 鼠标移上去后修改下拉菜单链接颜色 */.dropdown-content a:hover &#123;background-color: #f1f1f1&#125;/* 在鼠标移上去后显示下拉菜单 */.dropdown:hover .dropdown-content &#123; display: block;&#125;/* 当下拉内容显示后修改下拉按钮的背景颜色 */.dropdown:hover .dropbtn &#123; background-color: #3e8e41;&#125;&lt;/style&gt;&lt;div class=&quot;dropdown&quot;&gt; &lt;button class=&quot;dropbtn&quot;&gt;下拉菜单&lt;/button&gt; &lt;div class=&quot;dropdown-content&quot;&gt; &lt;a href=&quot;#&quot;&gt;菜鸟教程 1&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;菜鸟教程 2&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;菜鸟教程 3&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 下拉内容对齐方式如果你想设置右浮动的下拉菜单内容方向是从右到左，而不是从左到右，可以添加以下代码 right: 0;123.dropdown-content &#123; right: 0;&#125; 提示工具(Tooltip)使用 HTML 与 CSS 来创建提示工具。 提示工具在鼠标移动到指定元素后触发. 基础提示框(Tooltip)提示框在鼠标移动到指定元素上显示：1234567891011121314151617181920212223242526272829303132&lt;style&gt;/* Tooltip 容器 */.tooltip &#123; position: relative; display: inline-block; border-bottom: 1px dotted black; /* 悬停元素上显示点线 */&#125;/* Tooltip 文本 */.tooltip .tooltiptext &#123; visibility: hidden; width: 120px; background-color: black; color: #fff; text-align: center; padding: 5px 0; border-radius: 6px; /* 定位 */ position: absolute; z-index: 1;&#125;/* 鼠标移动上去后显示提示框 */.tooltip:hover .tooltiptext &#123; visibility: visible;&#125;&lt;/style&gt;&lt;div class=&quot;tooltip&quot;&gt;鼠标移动到这 &lt;span class=&quot;tooltiptext&quot;&gt;提示文本&lt;/span&gt;&lt;/div&gt; 实例解析 HTML) 使用容器元素 (like &lt;div&gt;) 并添加 “tooltip” 类。在鼠标移动到 &lt;div&gt;上时显示提示信息。 提示文本放在内联元素上(如 &lt;span&gt;) 并使用class=&quot;tooltiptext&quot;。 CSS） tooltip 类使用 position:relative, 提示文本需要设置定位值 position:absolute。注意: 接下来的实例会显示更多的定位效果。 tooltiptext 类用于实际的提示文本。模式是隐藏的，在鼠标移动到元素显示 。设置了一些宽度、背景色、字体色等样式。 CSS3 border-radius 属性用于为提示框添加圆角。 :hover 选择器用于在鼠标移动到到指定元素&lt;div&gt; 上时显示的提示。 定位提示工具以下实例中，提示工具显示在指定元素的右侧(left:105%) 。 注意 top:-5px 同于定位在容器元素的中间。使用数字 5 因为提示文本的顶部和底部的内边距（padding）是 5px。 如果你修改 padding 的值，top 值也要对应修改，这样才可以确保它是居中对齐的。 在提示框显示在左边的情况也是这个原理。 显示在右侧：1234.tooltip .tooltiptext &#123; top: -5px; left: 105%;&#125; 如果你想要提示工具显示在头部和底部。我们需要使用 margin-left 属性，并设置为 -60px。这个数字计算来源是使用宽度的一半来居中对齐，即： width/2 (120/2 = 60)。 显示在头部：123456.tooltip .tooltiptext &#123; width: 120px; bottom: 100%; left: 50%; margin-left: -60px; /* 使用一半宽度 (120/2 = 60) 来居中提示工具 */&#125; 添加箭头我们可以用CSS 伪元素 ::after及 content 属性为提示工具创建一个小箭头标志，箭头是由边框组成的，但组合起来后提示工具像个语音信息框。 以下实例演示了如何为显示在顶部的提示工具添加底部箭头：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;style&gt;.tooltip &#123; position: relative; display: inline-block; border-bottom: 1px dotted black;&#125;.tooltip .tooltiptext &#123; visibility: hidden; width: 120px; background-color: black; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; position: absolute; z-index: 1; bottom: 150%; left: 50%; margin-left: -60px;&#125;.tooltip .tooltiptext::after &#123; content: &quot;&quot;; position: absolute; top: 100%; left: 50%; margin-left: -5px; border-width: 5px; border-style: solid; border-color: black transparent transparent transparent;&#125;.tooltip:hover .tooltiptext &#123; visibility: visible;&#125;&lt;/style&gt;&lt;body style=&quot;text-align:center;&quot;&gt;&lt;h2&gt;顶部提示框/底部箭头&lt;/h2&gt;&lt;div class=&quot;tooltip&quot;&gt;鼠标移动到我这 &lt;span class=&quot;tooltiptext&quot;&gt;提示文本&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; transition及opacity:淡入效果我们可以使用 CSS3 transition 属性及 opacity 属性来实现提示工具的淡入效果: 左侧提示框/右侧箭头：12345678.tooltip .tooltiptext &#123; opacity: 0; transition: opacity 1s;&#125;.tooltip:hover .tooltiptext &#123; opacity: 1;&#125; 图像透明/不透明使用CSS很容易创建透明的图像。 opacity实例1:创建一个透明图像CSS3中属性的透明度是opacity。 首先，我们将向您展示如何用CSS创建一个透明图像。 12345img&#123; opacity:0.4; filter:alpha(opacity=40); /* IE8 及其更早版本 */&#125; IE9，Firefox，Chrome，Opera，和Safari浏览器使用透明度属性可以将图像变的不透明。 Opacity属性值从0.0 - 1.0。值越小，使得元素更加透明。 IE8和早期版本使用滤镜：alpha（opacity= x）。 x可以采取的值是从0 - 100。较低的值，使得元素更加透明。 实例2:图像的透明度:悬停效果将鼠标移到图像上12345678910img&#123; opacity:0.4; filter:alpha(opacity=40); /* IE8 及其更早版本 */&#125;img:hover&#123; opacity:1.0; filter:alpha(opacity=100); /* IE8 及其更早版本 */&#125; 第一个CSS块是和例1中的代码类似。此外，我们还增加了当用户将鼠标悬停在其中一个图像上时发生什么。在这种情况下，当用户将鼠标悬停在图像上时，我们希望图片是清晰的。此CSS是：opacity=1. IE8和更早版本使用： filter:alpha(opacity=100). 当鼠标指针远离图像时，图像将重新具有透明度。 实例3:透明的盒子中的文字首先，我们创建一个固定的高度和宽度的div元素，带有一个背景图片和边框。然后我们在第一个div内部创建一个较小的div元素。 这个div也有一个固定的宽度，背景颜色，边框:而且它是透明的。透明的div里面，我们在P元素内部添加一些文本。123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;style&gt;div.background&#123; width:500px; height:250px; background:url(klematis.jpg) repeat; border:2px solid black;&#125;div.transbox&#123; width:400px; height:180px; margin:30px 50px; background-color:#ffffff; border:1px solid black; opacity:0.6; filter:alpha(opacity=60); /* IE8 及更早版本 */&#125;div.transbox p&#123; margin:30px 40px; font-weight:bold; color:#000000;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;background&quot;&gt;&lt;div class=&quot;transbox&quot;&gt;&lt;p&gt;这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。这些文本在透明框里。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习CSS自定义样式，让博客焕然一新（二）]]></title>
    <url>%2Fpost%2F64348.html</url>
    <content type="text"><![CDATA[前面我们已经学习了CSS的语法、id和class选择器、如何创建及使用、css的背景、文本、字体、链接、列表样式、表格、盒子模型、边框，这些内容实在是丰富。我们要牢记，css就是一个层叠样式表，我们可以利用它来装饰我们的html。所以，使用css的三种方法要熟练。如果不用内联样式或内联样式表，那就要用外联，此时我们就得写一个外部的css文件，还有id、类、元素/标签、包含这4个常见的选择器。想要做出好看的样式？那就继续学习css吧！ 目录如下：[TOC] 轮廓（outline）轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。轮廓（outline）属性指定元素轮廓的样式、颜色和宽度。 属性 说明 值 outline 在一个声明中设置所有的轮廓属性 outline-coloroutline-styleoutline-widthinherit outline-color 设置轮廓的颜色 color-namehex-numberrgb-numberinvertinherit outline-style 设置轮廓的样式 nonedotteddashedsoliddoublegrooveridgeinsetoutsetinherit outline-width 设置轮廓的宽度 thinmediumthicklengthinherit CSS outline 属性规定元素轮廓的样式、颜色和宽度。 margin外边距CSS margin(外边距)属性定义元素周围的空间。margin 清除周围的（外边框）元素区域。margin 没有背景颜色，是==完全透明==的。margin 可以单独改变元素的上，下，左，右边距，也可以一次改变所有的属性。 margin简写属性为了缩短代码，有可能使用一个属性中margin指定的所有边距属性。这就是所谓的简写属性。 所有边距属性的简写属性是 margin :margin:100px 50px;margin属性可以有一到四个值。 margin:25px 50px 75px 100px; 上边距为25px 右边距为50px 下边距为75px 左边距为100px margin:25px 50px 75px; 上边距为25px 左右边距为50px 下边距为75px margin:25px 50px; 上下边距为25px 左右边距为50px margin:25px; 所有的4个边距都是25px 所有边距属性 属性 描述 margin 简写属性。在一个声明中设置所有外边距属性。 margin-bottom 设置元素的下外边距。 margin-left 设置元素的左外边距。 margin-right 设置元素的右外边距。 margin-top 设置元素的上外边距。 margin可以使用负值，重叠的内容。 padding填充CSS padding（填充）是一个简写属性，定义元素边框与元素内容之间的空间，即上下左右的内边距。值 |说明:-:|:-:length| 定义一个固定的填充(像素, pt, em,等)% |使用百分比值定义一个填充 padding（填充）；当元素的 padding（填充）内边距被清除时，所释放的区域将会受到元素背景颜色的填充。单独使用 padding 属性可以改变上下左右的填充。 类比：鸠占鹊巢。如果我不使用填充，那么元素背景会侵占我的领域~ 填充简写属性为了缩短代码，它可以在一个属性中指定的所有填充属性。这就是所谓的简写属性。所有的填充属性的简写属性是 padding :Padding属性，可以有一到四个值: padding:25px 50px 75px 100px;上填充为25px右填充为50px下填充为75px左填充为100px padding:25px 50px 75px;上填充为25px左右填充为50px下填充为75px padding:25px 50px;上下填充为25px左右填充为50px padding:25px;所有的填充都是25px 所有的填充属性 属性 说明 padding 使用简写属性设置在一个声明中的所有填充属性 padding-bottom 设置元素的底部填充 padding-left 设置元素的左部填充 padding-right 设置元素的右部填充 padding-top 设置元素的顶部填充 尺寸(Dimension)CSS 尺寸 (Dimension) 属性允许你控制元素的高度和宽度。同样，它允许你增加行间距。 所有尺寸(Dimension)属性 属性 描述 height 设置元素的高度。不包括填充，边框，或页边距！ line-height 设置行高。负值是不允许的 max-height 设置元素的最大高度。 max-width 设置元素的最大宽度。 min-height 设置元素的最小高度。 min-width 设置元素的最小宽度。 width 设置元素的宽度。不包括填充，边框，或页边距！ 注意，width、height等尺寸属性值，有4种:值 |描述:-:|:-:auto| 默认值。浏览器可计算出实际的宽度。length| 使用 px、cm 等单位定义宽度。%| 定义基于包含块（父元素）宽度的百分比宽度。inherit |规定应该从父元素继承 width 属性的值。 123456789101112131415161718192021222324252627&lt;style&gt;img.normal&#123; height:auto;&#125;img.big&#123; height:120px;&#125;p.ex&#123; height:130px; width:130px;&#125;&lt;/style&gt;&lt;body&gt;&lt;img class=&quot;normal&quot; src=&quot;logocss.gif&quot; width=&quot;95&quot; height=&quot;84&quot; /&gt;&lt;br&gt;&lt;img class=&quot;big&quot; src=&quot;logocss.gif&quot; width=&quot;95&quot; height=&quot;84&quot; /&gt;&lt;p class=&quot;ex&quot;&gt;这个段落的高和宽是 130px.这个段落的高和宽是 130px这个段落的高和宽是 130px 这个段落的高和宽是 130px 这个段落的高和宽是 130px&lt;/p&gt;&lt;p&gt;这是段落中的一些文本。这是段落中的一些文本。这是段落中的一些文本。这是段落中的一些文本。这是段落中的一些文本。这是段落中的一些文本.&lt;/p&gt;&lt;/body&gt; line-height行高12345678910111213141516171819202122232425262728&lt;style&gt;p.small &#123;line-height:70%;&#125;p.big &#123;line-height:200%;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;这是一个标准行高的段落。&lt;br&gt;这是一个标准行高的段落。&lt;br&gt;大多数浏览器的默认行高约为110%至120%。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;small&quot;&gt;这是一个更小行高的段落。&lt;br&gt;这是一个更小行高的段落。&lt;br&gt;这是一个更小行高的段落。&lt;br&gt;这是一个更小行高的段落。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;big&quot;&gt;这是一个更大行高的段落。&lt;br&gt;这是一个更大行高的段落。&lt;br&gt;这是一个更大行高的段落。&lt;br&gt;这是一个更大行高的段落。&lt;br&gt;&lt;/p&gt;&lt;/body&gt; 分组和嵌套选择器分组选择器在样式表中有很多具有相同样式的元素。123456789101112h1&#123; color:green;&#125;h2&#123; color:green;&#125;p&#123; color:green;&#125; 为了尽量减少代码，你可以使用分组选择器。每个选择器用逗号分隔。在下面的例子中，我们对以上代码使用分组选择器1234h1,h2,p&#123; color:green;&#125; 嵌套选择器它可能适用于选择器内部的选择器的样式。在下面的例子设置了三个样式： p{ }: 为所有 p 元素指定一个样式。 .marked{ }: 为所有 class=&quot;marked&quot; 的元素指定一个样式。 .marked p{ }: 为所有 class=&quot;marked&quot; 元素内的 p 元素指定一个样式。 p.marked{ }: 为所有class=&quot;marked&quot; 的 p 元素指定一个样式。 很拗口吧？12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;style&gt;p&#123; color:blue; text-align:center;&#125;.marked&#123; background-color:red;&#125;.marked p&#123; color:white;&#125;p.marked&#123; text-decoration:underline; color:black; background-color:yellow;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;这个段落是蓝色文本，居中对齐。我是p，p本来就是蓝色文本，居中对齐&lt;/p&gt;&lt;div class=&quot;marked&quot;&gt;&lt;p&gt; 这个段落不是蓝色文本。 我外头包围的是p， p外面是div的class=marked，marked类是背景色为红色， 并且.marked p这种，字体颜色是白色！~ 因为我是被class=marked的div元素包围的p元素~~~么么哒&lt;/p&gt;&lt;/div&gt;&lt;p&gt;所有 class=&quot;marked&quot;元素内的 p 元素指定一个样式，但有不同的文本颜色。 我是可爱的p，我p外面没有class，我就是简单的p。&lt;/p&gt;&lt;p class=&quot;marked&quot;&gt;带下划线的 p 段落?????????????????????。 我是p，并且我的class用了marked，要知道，p.marked是下划线，黑字，黄底&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 组合选择符组合选择符说明了两个选择器直接的关系。CSS组合选择符包括各种简单选择符的组合方式。在 CSS3 中包含了四种组合方式: 后代选择器(以空格分隔) 子元素选择器(以大于号分隔） 相邻兄弟选择器（以加号分隔） 普通兄弟选择器（以破折号分隔） 后代选择器(以空格分隔)后代选择器用于选取某元素的后代元素。 以下实例选取所有 &lt;p&gt; 元素插入到 &lt;div&gt; 元素中:1234div p&#123; background-color:yellow;&#125; 子元素选择器(以大于号分隔）与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素。 以下实例选择了&lt;div&gt;元素中所有直接子元素 &lt;p&gt;：1234div&gt;p&#123; background-color:yellow;&#125; 相邻兄弟选择器（以加号分隔）相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。 如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。 以下实例选取了所有位于 &lt;div&gt; 元素后的第一个 &lt;p&gt; 元素:1234div+p&#123; background-color:yellow;&#125; 后续兄弟选择器（以破折号分隔）后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。 以下实例选取了所有&lt;div&gt;元素之后的所有相邻兄弟元素&lt;p&gt; :1234div~p&#123; background-color:yellow;&#125; Display(显示) 与 Visibility（可见性）Display:块和内联元素块元素块元素是一个元素，占用了==全部宽度==，在前后都是换行符。 123address , blockquote , center , dir , div , dl , fieldset ,form , h1 , h2 , h3 , h4 , h5 , h6 , hr , isindex , menu ,noframes , noscript , ol , p , pre , table , ul , li 内联元素内联元素只需要必要的宽度，不强制换行。 1234a , abbr , acronym , b , bdo , big , br , cite , code , dfn ,em , font , i , img , input , kbd , label , q , s , samp ,select , small , span , strike , strong , sub , sup ,textarea , tt , u , var 利用CSS我们可以摆脱HTML标签归类的限制，自由地在不同标签/元素上应用我们需要的属性。主要用的CSS样式有以下三个： display:block – 显示为块级元素 display:inline – 显示为内联元素 display:inline-block – 显示为内联块元素 display:none或visibility:hidden隐藏元素隐藏一个元素可以通过把display属性设置为”none”，或把visibility属性设置为”hidden”。但是请注意，这两种方法会产生不同的结果。 visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。然而，visibility 还可能取值为 collapse 。 当设置元素 visibility: collapse 后，一般的元素的表现与 visibility: hidden 一样，也即其会占用空间。但如果该元素是与 table 相关的元素，例如 table row、table column、table column group、table column group 等，其表现却跟 display: none 一样，也即其占用的空间会释放。 display:inline-block内联块元素显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性我们常将&lt;ul&gt;元素加上display:inline-block样式，原本垂直的列表就可以水平显示了。 列表项显示为内联元素123456789101112131415&lt;style&gt;li&#123;display:inline;&#125;&lt;/style&gt;&lt;body&gt;&lt;p&gt;链接列表水平显示：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;/html/&quot; target=&quot;_blank&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/css/&quot; target=&quot;_blank&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/js/&quot; target=&quot;_blank&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/xml/&quot; target=&quot;_blank&quot;&gt;XML&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt; span元素作为块元素1234567891011121314151617&lt;style&gt;span&#123; display:block;&#125;&lt;/style&gt;&lt;body&gt;&lt;h2&gt;Nirvana&lt;/h2&gt;&lt;span&gt;Record: MTV Unplugged in New York&lt;/span&gt;&lt;span&gt;Year: 1993&lt;/span&gt;&lt;h2&gt;Radiohead&lt;/h2&gt;&lt;span&gt;Record: OK Computer&lt;/span&gt;&lt;span&gt;Year: 1997&lt;/span&gt;&lt;/body&gt; Position定位position 属性指定了元素的定位类型。position 属性的五个值： static relative fixed absolute sticky 元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法。 static没有定位HTML 元素的默认值，即没有定位，遵循正常的文档流对象。 静态定位的元素不会受到 top, bottom, left, right影响。 fixed相对于浏览器窗口是固定位置元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动Fixed定位使元素的位置与文档流无关，因此不占据空间。Fixed定位的元素和其他元素重叠。 relative相对定位元素的定位是相对其正常位置相对定位元素的定位是相对其正常位置。移动相对定位元素，但它原本所占的空间不会改变。相对定位元素经常被用来作为绝对定位元素的容器块。 absolute相对于最近的已定位父元素绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于&lt;html&gt;:absolute 定位使元素的位置与文档流无关，因此不占据空间。absolute 定位的元素和其他元素重叠。 sticky粘性定位sticky 英文字面意思是粘，粘贴，所以可以把它称之为粘性定位。position: sticky; 基于用户的滚动位置来定位。 粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。 它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。 元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。 这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。 z-index设置元素的堆叠顺序元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素。z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素 一个元素可以有正数或负数的堆叠顺序。如果两个定位元素重叠，没有指定z - index，最后定位在HTML代码中的元素将被显示在最前面。 cursor显示光标移动到指定的类型值有：autocrosshairdefaulte-resizehelpmoven-resizene-resizenw-resizepointerprogresss-resizese-resizesw-resizetextw-resizewait clip剪裁如果图像大于包含它的元素，会发生什么？-clip属性，让你指定一个绝对定位的元素，该尺寸应该是可见的，该元素被剪裁成这种形状并显示。其值：shape，设置元素的形状。唯一合法的形状值是：rect (top, right, bottom, left) overflow是否显示滚动条如果元素中的内容超出了给定的宽度和高度属性，overflow 属性可以确定是否显示滚动条等行为。属性值值 |描述:-:|:-:visible| 默认值。内容不会被修剪，会呈现在元素框之外。内容溢出元素框hidden |内容会被修剪，并且其余内容是不可见的。scroll |内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。auto |如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。inherit| 规定应该从父元素继承 overflow 属性的值。 float元素向左或向右移动CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。Float（浮动），往往是用于图像，但它在布局时一样非常有用。 float属性值有： left right none inherit 元素怎样浮动元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。 一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。浮动元素之后的元素将围绕它。浮动元素之前的元素将不会受到影响。 如果图像是右浮动，下面的文本流将环绕在它左边： 彼此相邻的浮动元素如果你把几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻。在这里，我们对图片廊使用 float 属性：123456789101112131415161718192021.thumbnail&#123; float:left; width:110px; height:90px; margin:5px;&#125;&lt;/style&gt;&lt;body&gt;&lt;h3&gt;图片库&lt;/h3&gt;&lt;p&gt;试着调整窗口,看看当图片没有足够的空间会发生什么。&lt;/p&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis_small.jpg&quot; width=&quot;107&quot; height=&quot;90&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis2_small.jpg&quot; width=&quot;107&quot; height=&quot;80&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis3_small.jpg&quot; width=&quot;116&quot; height=&quot;90&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis4_small.jpg&quot; width=&quot;120&quot; height=&quot;90&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis_small.jpg&quot; width=&quot;107&quot; height=&quot;90&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis2_small.jpg&quot; width=&quot;107&quot; height=&quot;80&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis3_small.jpg&quot; width=&quot;116&quot; height=&quot;90&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;/images/klematis4_small.jpg&quot; width=&quot;120&quot; height=&quot;90&quot;&gt;&lt;/body&gt; clear清除浮动元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。 clear 属性指定元素两侧不能出现浮动元素。 使用 clear 属性往文本中添加图片廊：1234.text_line&#123; clear:both;&#125; clear 属性值有：leftrightbothnoneinherit 对齐元素居中对齐要水平居中对齐一个元素(如 &lt;div&gt;), 可以使用margin: auto; 设置到元素的宽度将防止它溢出到容器的边缘。注意: 如果没有设置 width 属性(或者设置 100%)，居中对齐将不起作用。元素通过指定宽度，并将两边的空外边距平均分配：123456.center &#123; margin: auto; width: 50%; border: 3px solid green; padding: 10px;&#125; 文本居中对齐如果仅仅是为了文本在元素内居中对齐，可以使用text-align: center;1234.center &#123; text-align: center; border: 3px solid green;&#125; margin: auto图片居中对齐要让图片居中对齐, 可以使用 margin: auto; 并将它放到 块 元素中:123456img &#123; display: block; margin: auto; width: 40%;&#125; position:定位左右对齐我们可以使用position: absolute; 属性来对齐元素:1234567.right &#123; position: absolute; right: 0px; width: 300px; border: 3px solid #73AD21; padding: 10px;&#125; 注释：绝对定位元素会被从正常流中删除，并且能够交叠元素。 提示: 当使用 position 来对齐元素时, 通常 &lt;body&gt;元素会设置 margin 和 padding 。 这样可以避免在不同的浏览器中出现可见的差异。 当使用 position 属性时，IE8 以及更早的版本存在一个问题。如果容器元素（在我们的案例中是 &lt;div class=&quot;container&quot;&gt;）设置了指定的宽度，并且省略了 !DOCTYPE 声明，那么 IE8 以及更早的版本会在右侧增加 17px 的外边距。这似乎是为滚动条预留的空间。当使用 position 属性时，请始终设置 !DOCTYPE 声明： float左右对齐我们也可以使用 float 属性来对齐元素。当像这样对齐元素时，对 &lt;body&gt; 元素的外边距和内边距进行预定义是一个好主意。这样可以避免在不同的浏览器中出现可见的差异。123456.right &#123; float: right; width: 300px; border: 3px solid #73AD21; padding: 10px;&#125; 注意：如果子元素的高度大于父元素，且子元素设置了浮动，那么子元素将溢出，这时候你可以使用clearfix(清除浮动)来解决该问题。 我们可以在父元素上添加 overflow: auto; 来解决子元素溢出的问题:12345678910111213141516171819202122232425262728293031&lt;style&gt;div &#123; border: 3px solid #4CAF50; padding: 5px;&#125;.img1 &#123; float: right;&#125;.clearfix &#123; overflow: auto;&#125;.img2 &#123; float: right;&#125;&lt;/style&gt;&lt;body&gt;&lt;p&gt;以下实例图在父元素中溢出，很不美观:&lt;/p&gt;&lt;div&gt;&lt;img class=&quot;img1&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;170&quot; height=&quot;170&quot;&gt;菜鸟教程 - 学的不仅是技术，更是梦想！！！&lt;/div&gt;&lt;p style=&quot;clear:right&quot;&gt;在父元素上通过添加 clearfix 类，并设置 overflow: auto; 来解决该问题:&lt;/p&gt;&lt;div class=&quot;clearfix&quot;&gt;&lt;img class=&quot;img2&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;170&quot; height=&quot;170&quot;&gt;菜鸟教程 - 学的不仅是技术，更是梦想！！！&lt;/div&gt; padding垂直居中CSS 中有很多方式可以实现垂直居中对齐。 一个简单的方式就是头部顶部使用 padding:1234.center &#123; padding: 70px 0; border: 3px solid green;&#125; padding和text-align:center水平和垂直都居中12345.center &#123; padding: 70px 0; border: 3px solid green; text-align: center;&#125; line-height垂直居中12345678910111213.center &#123; line-height: 200px; height: 200px; border: 3px solid green; text-align: center;&#125;/* 如果文本有多行，添加以下代码: */.center p &#123; line-height: 1.5; display: inline-block; vertical-align: middle;&#125; position和transform垂直居中除了使用 padding 和 line-height 属性外,我们还可以使用 transform 属性来设置垂直居中:12345678910111213.center &#123; height: 200px; position: relative; border: 3px solid green;&#125;.center p &#123; margin: 0; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; 注：更多 transform 属性内容可以参阅 2D 翻转章节。]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习CSS自定义样式，让博客焕然一新（一）]]></title>
    <url>%2Fpost%2F27430.html</url>
    <content type="text"><![CDATA[不得不说，HTML和CSS真是一对好兄弟，我有很多想法，还是得靠他们合作才能实现吧！那我就要继续记笔记咯！搬起小板凳，开始好奇地学习CSS吧！ 唔，内容有点多，所以，还是分批次写吧~本文目录如下：@[TOC] CSS基础简介CSS与HTMLCSS 指层叠样式表 (Cascading Style Sheets) HTML 元素可以通过样式定义来显示，样式存储在样式表中，外部样式表就存储在CSS文件中。所以可以编辑保存在外部的.css文件，就能改变站点中所有的页面的布局和外观。 CSS规则由选择器+声明组成 选择器：我需要改变样式的HTML元素 每条声明=一个属性+一个值（属性与值，被冒号分开） 属性：是我希望设置的样式属性style attribute 声明以分号结束;,声明组以大括号包围{} 每行只描述一个属性，能让CSS可读性更强 注释css注释是用来解释我写的代码，第一，我看代码的时候能够提醒自己，第二，浏览器也会忽略它，不会显示的。以/*开始，以*/结束12345678/*这是个注释*/p&#123;text-align:center;/*这是另一个注释*/color:black;font-family:arial;&#125; id与class类id选择器 id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。 以下的样式规则应用于元素属性 id=”para1”: 1234567891011121314&lt;head&gt;&lt;style&gt;#para1&#123; text-align:center; color:red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;para1&quot;&gt;Hello World!&lt;/p&gt;&lt;p&gt;这个段落不受该样式的影响。&lt;/p&gt; class选择器 class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示： 在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。 1234567891011121314&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;style&gt;.center&#123; text-align:center;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 class=&quot;center&quot;&gt;标题居中&lt;/h1&gt;&lt;p class=&quot;center&quot;&gt;段落居中。&lt;/p&gt; 在以下实例中, 所有的 p 元素使用 class=”center” 让该元素的文本居中:(此时应该算作元素/标签选择器！)123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;style&gt;p.center&#123; text-align:center;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 class=&quot;center&quot;&gt;这个标题不受影响&lt;/h1&gt;&lt;p class=&quot;center&quot;&gt;这个段落受影响，会居中对齐。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。 HTML中设置CSS样式的多种选择器如果你要在 html 标签中设置 CSS 样式，那么你有四种方法，即 css 选择器有四种。 除了提到的 id 和 class 选择器外，第三种选择器为标签选择器，即以 html 标签作为 css 修饰所用的选择器；第四种是直接在html标签内部写css代码。（好像还有好几种，我就不多写了，总之，id、class、element package都很常见~ ID选择器（ID selector，IS）使用#标识selector。语法格式：#S{...}（S为选择器名）。 例：id为name的标签会匹配下面的样式1234567&lt;style&gt;#name&#123; color:red;&#125;&lt;/style&gt;&lt;!--下面文字是红色的--&gt;&lt;p id=&quot;name&quot;&gt;red text&lt;/p&gt; 类选择器（class selector，CS）使用.标识selector，语法格式：.S{...}（S为选择器名）。例：class属性值为value的标签会匹配下面的样式1234567&lt;style&gt;.value&#123; text-align:center;&#125;&lt;/style&gt;&lt;!--下面的文字是居中对齐的--&gt;&lt;p class=&quot;value&quot;&gt;center text&lt;/p&gt; 元素选择器（element selector，ES）又叫标签选择器使用HTML的标签名作为selector名。语法格式：S{...}（S为选择器名）。例：所有的p标签都会匹配以下的样式1234567&lt;style&gt;p&#123; font-style:italic;&#125;&lt;/style&gt;&lt;!--下面的文字是斜体的--&gt;&lt;p&gt;italic text&lt;/p&gt; 包含选择器（package selector，PS）指定目标选择器必须处在某个选择器对应的元素内部。语法格式：A B{...}（A、B为HTML元素/标签，表示对处于A中的B标签有效）。(经常用div) 例：以下div内的p标签和div外的p标签分别匹配不同的样式123456789101112&lt;style&gt;p&#123; color:red;&#125;div p&#123; color:yellow;&#125;&lt;/style&gt;&lt;p&gt;red text&lt;/p&gt;&lt;!--文字是红色的--&gt;&lt;div&gt; &lt;p&gt;yellow text&lt;/p&gt;&lt;!--文字是黄色的--&gt;&lt;/div&gt; CSS创建：插入样式表的三种方法外部样式表(External style sheet) 当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 &lt;link&gt; 标签链接到样式表。 &lt;link&gt; 标签在（文档的）头部： 123&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt; 浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。 外部样式表可以在任何文本编辑器中进行编辑。文件==不能包含任何的 html 标签==。样式表应该以 .css 扩展名进行保存。下面是一个样式表文件的例子：123hr &#123;color:sienna;&#125;p &#123;margin-left:20px;&#125;body &#123;background-image:url(&quot;/images/back40.gif&quot;);&#125; 不要在==属性值与单位之间==留有空格（如：”margin-left: 20 px” ），正确的写法是 “margin-left: 20px” 。 内部样式表(Internal style sheet) 当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用&lt;style&gt;标签在文档头部定义内部样式表，就像这样: 1234567&lt;head&gt;&lt;style&gt;hr &#123;color:sienna;&#125;p &#123;margin-left:20px;&#125;body &#123;background-image:url(&quot;images/back40.gif&quot;);&#125;&lt;/style&gt;&lt;/head&gt; 内联样式(Inline style) 由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距： 1&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt; 多重样式如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。 例如，外部样式表拥有针对 h3 选择器的三个属性：123456h3&#123; color:red; text-align:left; font-size:8pt;&#125; 而内部样式表拥有针对 h3 选择器的两个属性：12345h3&#123; text-align:right; font-size:20pt;&#125; 假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：123color:red;text-align:right;font-size:20pt; 即颜色属性将被继承于外部样式表，而文字排列（text-alignment）和字体尺寸（font-size）会被内部样式表中的规则取代。 多重样式优先级样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。 一般情况下，优先级如下： ==(内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式==如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式。123456789101112&lt;head&gt; &lt;!-- 外部样式 style.css --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;/&gt; &lt;!-- 设置：h3&#123;color:blue;&#125; --&gt; &lt;style type=&quot;text/css&quot;&gt; /* 内部样式 */ h3&#123;color:green;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;测试！会出现内部样式的绿色字！&lt;/h3&gt;&lt;/body&gt; 背景CSS 背景属性用于定义HTML元素的背景。 background-colorbackground-imagebackground-repeatbackground-attachmentbackground-positionbackground-size background-size背景尺寸语法：background-size: length|percentage|cover|contain; 属性值值 |说明:-:|:-:length |设置背景图片高度和宽度。第一个值设置==宽度==，第二个值设置的高度。如果只给出一个值，第二个是设置为 auto(自动)percentage |将计算相对于背景定位区域的百分比。第一个值设置==宽度==，第二个值设置的高度。如果只给出一个值，第二个是设置为”auto(自动)”cover |此时会==保持图像的纵横比==并将图像缩放成将==完全覆盖背景定位区域的最小大小==。contain |此时会保持图像的纵横比并将图像缩放成将==适合背景定位区域的最大大小==。 background-color背景颜色CSS中，颜色值通常以以下方式定义: 十六进制 - 如：”#ff0000” RGB - 如：”rgb(255,0,0)” 颜色名称 - 如：”red” background-image背景图像默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体文档中多个背景图像:body {background-image:url(&#39;paper.gif&#39;);}要么：=&quot;&quot;要么url()12345678910111213141516&lt;style&gt;#example1 &#123; background-image: url(img_flwr.gif), url(paper.gif); background-position: right bottom, left top; background-repeat: no-repeat, repeat; padding: 15px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;example1&quot;&gt;&lt;h1&gt;Lorem Ipsum Dolor&lt;/h1&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.&lt;/p&gt;&lt;p&gt;Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.&lt;/p&gt;&lt;/div&gt; background-repeat平铺属性值值 |说明:-:|:-:repeat |背景图像将向垂直和水平方向重复。这是默认repeat-x| ==只有水平位置==会重复背景图像repeat-y| 只有垂直位置会重复背景图像no-repeat |background-image不会重复inherit |指定background-repea属性设置应该从父元素继承 background-attachment固定or滚动属性值值 |说明:-:|:-:scroll |背景图片随页面的其余部分滚动。这是默认fixed| 背景图像是固定的inherit |指定background-attachment的设置应该从父元素继承1234567891011121314151617181920212223242526body&#123;background-image:url(&apos;smiley.gif&apos;);background-repeat:no-repeat;background-attachment:fixed;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;p&gt;背景图片是固定的。尝试向下滚动页面。&lt;/p&gt;&lt;/body&gt; background-position图片位置属性值值 |描述:-:|:-:left topleft centerleft bottomright topright centerright bottomcenter topcenter centercenter bottom| 如果仅指定一个关键字，其他值将会是”center”x% y% |第一个值是水平位置，第二个值是垂直。左上角是0％0％。右下角是100％100％。如果仅指定了一个值，其他值将是50％。 。默认值为：0％0％xpos ypos |第一个值是水平位置，第二个值是垂直。左上角是0。单位可以是像素（0px0px）或任何其他 CSS单位。如果仅指定了一个值，其他值将是50％。你可以混合使用％和positionsinherit |指定background-position属性设置应该从父元素继承 background简写背景属性到一个声明中123456&lt;style&gt;body&#123;background: #00ff00 url(&apos;smiley.gif&apos;) no-repeat fixed center;&#125;&lt;/style&gt; 文本所有CSS文本属性。属性| 描述:-:|:-:color |设置文本颜色direction |设置文本方向。letter-spacing| 设置字符间距line-height| 设置行高text-align |对齐元素中的文本text-decoration |向文本添加修饰text-indent |缩进元素中文本的首行text-shadow| 设置文本阴影text-transform |控制元素中的字母unicode-bidi| 设置或返回文本是否被重写vertical-align| 设置元素的垂直对齐white-space |设置元素中空白的处理方式word-spacing |设置字间距 white-space元素中空白的处理方式 属性 描述 normal 默认。空白会被浏览器忽略。 pre 空白会被浏览器保留。其行为方式类似 HTML 中的 标签。 nowrap 文本不会换行，文本会在在同一行上继续，直到遇到 标签为止。 pre-wrap 保留空白符序列，但是正常地进行换行。 pre-line 合并空白符序列，但是保留换行符。 inherit 规定应该从父元素继承 white-space 属性的值。 规定段落中的文本不进行换行1234p&#123; white-space:nowrap;&#125; text-align对齐元素中的文本属性值属性| 描述:-:|:-:left |把文本排列到左边。默认值：由浏览器决定。right |把文本排列到右边。center| 把文本排列到中间。justify| 实现两端对齐文本效果。inherit |规定应该从父元素继承 text-align 属性的值。 direction文本方向 ltr 默认。文本方向从左到右。 rtl 文本方向从右到左。 inherit 规定应该从父元素继承 direction 属性的值。 text-decorations向文本添加修饰属性值属性| 描述:-:|:-:none |默认。定义标准的文本。underline |定义文本下的一条线。overline |定义文本上的一条线。line-through| 定义穿过文本下的一条线。blink| 定义闪烁的文本。inherit |规定应该从父元素继承 text-decoration 属性的值。 vertical-align元素的垂直对齐属性值属性| 描述:-:|:-:baseline |默认。元素放置在父元素的基线上。sub |垂直对齐文本的下标。super |垂直对齐文本的上标top |把元素的顶端与行中最高元素的顶端对齐text-top| 把元素的顶端与父元素字体的顶端对齐middle| 把此元素放置在父元素的中部。bottom |把元素的底端与行中最低的元素的顶端对齐。text-bottom |把元素的底端与父元素字体的底端对齐。length | -% |使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。inherit 规定应该从父元素继承 vertical-align 属性的值。 字体字体属性定义字体，加粗，大小，文字样式。 所有CSS字体属性 Property 描述 font 在一个声明中设置所有的字体属性 font-family 指定文本的字体系列 font-size 指定文本的字体大小 font-style 指定文本的字体样式 font-variant 以小型大写字体或者正常字体显示文本。 font-weight 指定字体的粗细。 font - family属性指定一个元素的字体。 font-family 可以把多个字体名称作为一个”回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。 有两种类型的字体系列名称： family-name - 指定的系列名称：具体字体的名称，比如：”times”、”courier”、”arial”。 generic-family - 通常字体系列名称：比如：”serif”、”sans-serif”、”cursive”、”fantasy”、”monospace。 使用某种特定的字体系列（Geneva）完全取决于用户机器上该字体系列是否可用；这个属性没有指示任何字体下载。因此，强烈推荐使用一个通用字体系列名作为后路。 注意：每个值用逗号分开。 注意: 如果字体名称包含空格，它必须加上引号。在HTML中使用”style”属性时，必须使用单引号。 链接样式链接的样式，可以用任何CSS属性（如颜色，字体，背景等）。 特别的链接，可以有不同的样式，这取决于他们是什么状态。 四个链接状态 a:link - 正常，未访问过的链接 a:visited - 用户已访问过的链接 a:hover - 当用户鼠标放在链接上时 a:active - 链接被点击的那一刻 当设置为若干链路状态的样式，也有一些顺序规则： a:hover 必须跟在 a:link 和 a:visited后面 a:active 必须跟在 a:hover后面 链接样式的顺序记忆：L(link)OV(visited)E and H(hover)A(active)TE text-decoration 属性主要用于删除链接中的下划线： 123456&lt;style&gt;a:link &#123;text-decoration:none;&#125; /* unvisited link */a:visited &#123;text-decoration:none;&#125; /* visited link */a:hover &#123;text-decoration:underline;&#125; /* mouse over link */a:active &#123;text-decoration:underline;&#125; /* selected link */&lt;/style&gt; 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;style&gt;a:link,a:visited&#123; display:block; font-weight:bold; color:#FFFFFF; background-color:#98bf21; width:120px; text-align:center; padding:4px; text-decoration:none;&#125;a:hover,a:active&#123; background-color:#7A991A;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;/css/&quot; target=&quot;_blank&quot;&gt;这是一个链接&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 列表项:所有的CSS列表属性所有的CSS列表属性属性| 描述:-:|:-:list-style |简写属性。用于把所有用于列表的属性设置于一个声明中list-style-image |将图象设置为列表项标志。list-style-position |设置列表中列表项标志的位置。list-style-type |设置列表项标志的类型。 list-style-image设定列表项标志的图像属性值是url123456&lt;style&gt;ul&#123; list-style-image:url(&apos;sqpurple.gif&apos;);&#125;&lt;/style&gt; list-style-position属性inside 列表项目标记放置在文本以内，且环绕文本根据标记对齐。outside 默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。 123456789101112&lt;h2&gt;Outside:&lt;/h2&gt;&lt;ul style=&quot;list-style-position:outside;width:25%;&quot;&gt;&lt;li style=&quot;border:1px solid #000000&quot;&gt;Coffee&lt;/li&gt;&lt;li style=&quot;border:1px solid #000000;border-top:0&quot;&gt;Tea&lt;/li&gt;&lt;li style=&quot;border:1px solid #000000;border-top:0&quot;&gt;Coca-cola&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Inside:&lt;/h2&gt;&lt;ul style=&quot;list-style-position:inside;width:25%;&quot;&gt;&lt;li style=&quot;border:1px solid #000000;&quot;&gt;Coffee&lt;/li&gt;&lt;li style=&quot;border:1px solid #000000;border-top:0;&quot;&gt;Tea&lt;/li&gt;&lt;li style=&quot;border:1px solid #000000;border-top:0;&quot;&gt;Coca-cola&lt;/li&gt;&lt;/ul&gt; list-style-type列表项标志类型1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;style&gt;ul.a &#123;list-style-type:circle;&#125;ul.b &#123;list-style-type:square;&#125;ol.c &#123;list-style-type:upper-roman;&#125;ol.d &#123;list-style-type:lower-alpha;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;无序列表实例:&lt;/p&gt;&lt;ul class=&quot;a&quot;&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Coca Cola&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;b&quot;&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Coca Cola&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有序列表实例:&lt;/p&gt;&lt;ol class=&quot;c&quot;&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Coca Cola&lt;/li&gt;&lt;/ol&gt;&lt;ol class=&quot;d&quot;&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Coca Cola&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt; 边框CSS边框属性允许你指定一个元素边框的样式和颜色。 CSS 边框属性属性 |描述:-:|:-:border| 简写属性，用于把针对四个边的属性设置在一个声明。border-style| 用于设置元素所有边框的样式，或者单独地为各边设置边框样式。border-width| 简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。border-color| 简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。border-bottom |简写属性，用于把下边框的所有属性设置到一个声明中。border-bottom-color |设置元素的下边框的颜色。border-bottom-style |设置元素的下边框的样式。border-bottom-width |设置元素的下边框的宽度。border-left |简写属性，用于把左边框的所有属性设置到一个声明中。border-left-color |设置元素的左边框的颜色。border-left-style |设置元素的左边框的样式。border-left-width| 设置元素的左边框的宽度。border-right| 简写属性，用于把右边框的所有属性设置到一个声明中。border-right-color| 设置元素的右边框的颜色。border-right-style |设置元素的右边框的样式。border-right-width| 设置元素的右边框的宽度。border-top |简写属性，用于把上边框的所有属性设置到一个声明中。border-top-color| 设置元素的上边框的颜色。border-top-style| 设置元素的上边框的样式。border-top-width| 设置元素的上边框的宽度。 border-style边框样式border-style值:none: 默认无边框dotted: 定义一个点线边框dashed: 定义一个虚线边框solid: 定义实线边框double: 定义两个边框。 两个边框的宽度和 border-width 的值相同groove: 定义3D沟槽边框。效果取决于边框的颜色值ridge: 定义3D脊边框。效果取决于边框的颜色值inset:定义一个3D的嵌入边框。效果取决于边框的颜色值outset: 定义一个3D突出边框。 效果取决于边框的颜色值 border-width边框宽度您可以通过 border-width 属性为边框指定宽度。 为边框指定宽度有两种方法：可以指定长度值，比如 2px 或 0.1em(单位为 px, pt, cm, em 等)，或者使用 3 个关键字之一，它们分别是 thick 、medium（默认值） 和 thin。 注意：CSS 没有定义 3 个关键字的具体宽度，所以一个用户可能把 thick 、medium 和 thin 分别设置为等于 5px、3px 和 2px，而另一个用户则分别设置为 3px、2px 和 1px。12345678910p.one&#123; border-style:solid; border-width:5px;&#125;p.two&#123; border-style:solid; border-width:medium;&#125; border-color边框颜色border-color属性用于设置边框的颜色。可以设置的颜色： name - 指定颜色的名称，如 “red”RGB - 指定 RGB 值, 如 “rgb(255,0,0)”Hex - 指定16进制值, 如 “#ff0000”您还可以设置边框的颜色为”transparent”。 注意： border-color单独使用是不起作用的，必须得先使用border-style来设置边框样式。12345678910p.one&#123; border-style:solid; border-color:red;&#125;p.two&#123; border-style:solid; border-color:#98bf21;&#125; 表格边框border属性border-collapse折叠边框下面的例子指定了一个表格的Th和TD元素的黑色边框：1234table, th, td&#123; border: 1px solid black;&#125; 请注意，在上面的例子中的表格有双边框。这是因为表和th/ td元素有独立的边界。 为了显示一个表的单个边框，使用 border-collapse属性。border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开：12345678table&#123; border-collapse:collapse;&#125;table,th, td&#123; border: 1px solid black;&#125; Width和height表格宽度和高度Width和height属性定义表格的宽度和高度。 下面的例子是设置100％的宽度，50像素的th元素的高度的表格：12345678table&#123; width:100%;&#125;th&#123; height:50px;&#125; text-align表格文字对齐表格中的文本对齐和垂直对齐属性。 text-align属性设置水平对齐方式，向左，右，或中心：1234td&#123; text-align:right;&#125; 垂直对齐属性设置垂直对齐，比如顶部，底部或中间：12345td&#123; height:50px; vertical-align:bottom;&#125; padding表格填充如果在表的内容中控制空格之间的边框，应使用td和th元素的填充属性：1234td&#123; padding:15px;&#125; 表格边框、文本、背景颜色下面的例子指定边框的颜色，和th元素的文本和背景颜色：123456789table, td, th&#123; border:1px solid green;&#125;th&#123; background-color:green; color:white;&#125; Box Model盒子模型所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。 下面的图片说明了盒子模型(Box Model)： 不同部分的说明： Margin(外边距) - 清除边框外的区域，外边距是透明的。 Border(边框) - 围绕在内边距和内容外的边框。 Padding(内边距) - 清除内容周围的区域，内边距是透明的。 Content(内容) - 盒子的内容，显示文本和图像。当您指定一个==CSS元素的宽度和高度属性==时，你只是设置==内容区域的宽度和高度==。要知道，完全大小的元素，你还必须添加填充，边框和边距。 下面的例子中的元素的总宽度为300px：123456div &#123; width: 300px; border: 25px solid green; padding: 25px; margin: 25px;&#125; 让我们自己算算：300px (宽) 50px (左 + 右填充) 50px (左 + 右边框) 50px (左 + 右边距)= 450px 试想一下，你只有250像素的空间。让我们设置总宽度为250像素的元素: 123456div &#123; width: 220px; padding: 10px; border: 5px solid gray; margin: 0;&#125; 最终元素的总宽度计算公式是这样的： 总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距 元素的总高度最终计算公式是这样的： 总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpost%2F16107.html</url>
    <content type="text"><![CDATA[让我为你点一首歌吧！陪伴你看完这篇文章，或者静静享受歌曲吧！ Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>指南</tag>
        <tag>新开始</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于...确定了，不想再多折腾页面了，还是好好的写Markdown吧]]></title>
    <url>%2Fpost%2F55367.html</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用iPic来配合Markdown完成内容丰富的文档！]]></title>
    <url>%2Fpost%2F63512.html</url>
    <content type="text"><![CDATA[前不久也在折腾Markdown，我发现「图片」这一项对我来说还是比较麻烦的一件事情，于是不停的搜寻着解决方案，果不其然，原来网上有这么多「图床」服务，例如七牛等。可是，却还没有解决我的问题。怎样找到一个免费、方便的工具，让我优雅地玩转Markdown和图片呢？现在我的问题基本上解决啦！ 中国的确有很多不错的图床，参考知乎:国内有什么方便的图床？只是，我的博客还是用的GitHub的静态页面，没有备案，所以，七牛仅有1个月的非备案域名试用，对我来说就相当于一个定时炸弹。除此以外，我也有一些截图直接上传的需求。而普通的图床都需要经过这些步骤： 打开某图床网页并且登录，打开个人存储空间 上传图片通常要拖拽 复制外链 粘贴到 Markdown啊，这四步，对于我这个懒癌患者，还是不能忍！ 接着我就发现了它， 铛铛铛铛，看下方👇 它的详细介绍在此：👉 iPic - Markdown 图床、文件上传工具有了图床神器 iPic，不论屏幕截图、还是复制图片，都可以自动上传、保存 Markdown 格式的链接，直接粘贴插入，够懒人吧？使用 Hexo | Heroku 或 WordPress 写博客、在公众号发文章、在知乎讨论、在豆瓣灌水、在论坛发帖、跨境做外贸电商 …iPic 带给你从未有过的插图体验。当然，除了图片，你可以上传普通文件，上传方式与图片完全相同。 我目前主要用MacBook Air。iPic的免费版还是够用的，直接上传到免费的图床上，它在Mac上运行的不错呢！ 很好，以后就用它了！…什么？你还不知道怎么用？那我就简单说一下，它的使用方法吧~ 图片上传我最喜欢的就是他的图片上传~免费上传图片，（默认图床是微博图床）立刻就可以获得链接，写Markdown时自动生成![](URL)这个格式，我们就得到了插入的图片。 操作方法复制图片上传很多时候，要么我们复制好图片，要么是截图后得到的图片（也算复制哦！因为它在剪切板中），那就只需要在菜单栏上选择要上传的图片，就会自动上传啦。上传后，再次点击我们的图片，那就可以得到Markdown的![](URL)这个格式。那我们就可以直接粘贴到Markdown软件中了！ iPic 会自动监测剪切板的变化，当复制图片后，该图片会出现在 iPic 菜单中待上传区域。如果需要上传，点击菜单中该图片即可。手动上传比较适合临时上传少量图片。 拖拽上传就是把图片拖到菜单栏上的ipic。 可以注意到，上传时菜单栏图标也会显示上传的进度。很简洁、却很实用，不再盲目等待。 如果有很多图片，也是可以一次性上传的，图片上传后的顺序，和上传前选择的顺序一致。 右击图片选择finder中的服务上传使用服务上传还有其他便利之处： 可以一次性上传多张图片 即使 iPic 并未运行，系统也会启动 iPic、并自动上传 cmd+U快捷键上传只要选中图片，然后按下 Command + U 快捷键，即可自动上传。如果你觉得默认快捷键 Command + U 不方便，也可以在 系统偏好设置 &gt; 键盘 &gt; 快捷键 &gt; 服务 中修改 使用 iPic 上传 对应的快捷键。同样，如果你的 Mac 中安装了很多程序、菜单中有很多你不需要的服务，也可以在这里进行关闭。 ipic菜单Markdown链接与普通链接切换这里有个很贴心的功能：切换普通链接、Markdown 格式链接时，如果粘贴板中有上一格式的内容，会转换后重新保存到粘贴板中。 图片上传记录iPic 会保存最近上传的 15 张图片，其中最后上传的 3 张图片会出现在一级菜单中，其他的则在 更多已上传图片 中。点击已上传图片，则会复制该图片的链接。 当然，可以在 更多 菜单中清空图片上传记录。 下载ipic介绍完了ipic，你觉得不错，就可以下载了哦~]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>iPic</tag>
        <tag>图片</tag>
        <tag>mac软件</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习一种新的语言吧！HTML学习记录笔记（一）]]></title>
    <url>%2Fpost%2F59711.html</url>
    <content type="text"><![CDATA[我自从接触电脑后，就经常发现HTML这个神奇的东西出现，但是由于自己没有什么编程基础、非程序员💻，所以一直都没有使劲钻研这种语言，即使很多人说这个很简单…而自从我开始对「博客blog」万分感兴趣后，我就改变了想法，我不愿意面对html时又是一头雾水了！知识改变未来，即使我是代码小白，也是有对编程的好奇之心滴！毕竟，我也是大一学过C++的人。我一定可以掌握html语言并且用它进行编写、改善我的博客等。 终于，我学会利用HEXO搭建了一个托管在GitHub的静态博客网站（使用的是基于NEXT模板的Gemini风格，也就是你们现在看到的这个网站啦），虽然网站还没有达到我想要的效果，不过它还在建设当中，这期间，我不断参考他人的网站、看教程，一直不停地构建、修改、调整我的blog。 在我玩hexo博客时，以下命令不知道用了多少次、代码不晓得写了多少遍: 123456789101112npm install &lt;package&apos;s name&gt; --savenpm uninstall &lt;package&apos;s name&gt; --savecd blogcdlsclearhexo cleanhexo ghexo s --debughexo dhexo new &lt;post&apos;s name&gt;hexa -l 一开始接触，是真的挺费时的，因为太多不懂的东西了，看着教程也是一知半解，慢慢摸索，处处碰壁，GitHub的注册还是我两年前左右在易班网络部的吴大佬建议下弄好的。真的很感谢他呀，虽然拖了两年多才开始好好利用它。😓 我发现如果自己懂一些css、html、js等语言、代码，那么我的个人博客建立之路也不会这么困难了。天知道，我每天也就那么几次debug，存储后的log文件都达到了2M，简直恐怖 so，废话不多说啦，开始记录我的HTML学习吧~ 目录如下：[TOC] HTML简介（HTML5标准） 什么是HTML？ 他就是一种语言，叫做超文本标记语言。HyperText Markup Language，所以简称HTML 什么是超文本？为什么这种语言如此流行？我们可以用它来做什么呢？ 来，我们慢慢细说… 超文本，就是指页面内可以包含「图片」「链接」「音乐」「程序」等的非文字元素百度：HTML 。把它理解为超越文本的存在？似乎也很合适呢！ 它是一种用于创建网页的标准标记语言，即是说，我们看到的网页，基本上都利用了HTML，HTML就是可以运行在浏览器上，由浏览器解析，所以，如果我们学会了HTML，那就可以建立自己的web页面、站点啦！推荐1：HTML教程 超文本标记语言(HTML)的结构可以分为两个部分： 头Head;提供关于网页的信息 主体Body；部分提供关于网页的具体内容 HTML特点 扩展名为.htm或者.html。所以无论你用什么软件几乎都可以编写，只要保存的文档扩展名为html即可啦。编写的软件通常有三类： 基础的文本、文档编写软件。微软自带的记事本、写字板，word，wps，都可以写html，只需要注意扩展名即可。 半所见即所得软件，如Sublime Text、E-webediter等 所见即所得软件，如Dreamweaver 是一种简单通用的语言，就是一种文本，需要浏览器的解释，所以，无论用什么类型的电脑、浏览器，都可以看到html制作的页面。 头部内容head 用2个标记符，表示头部信息的开始与结尾：&lt;head&gt; &lt;/head&gt; 没错，它们的顺序必须是&lt;head&gt;在前，&lt;/head&gt;在后。 注意这两个标记符号哦，后面的，多加了一个斜杠/ 那么，问题来了 头部信息一般存储什么内容呢？ head元素一般有7个： 标签 描述 &lt;head&gt; 定义了文档的信息 &lt;title&gt; 定义了文档的标题 &lt;base&gt; 定义了页面链接标签的默认链接地址 &lt;link&gt; 定义了一个文档和外部资源之间的关系 &lt;meta&gt; 定义了HTML文档中的元数据 &lt;script&gt; 定义了客户端的脚本文件 &lt;style&gt; 定义了HTML的样式文件 主体内容body头部有两个标记符，主体也有，叫做「正文标记符」「实体标记」：&lt;body&gt; &lt;/body&gt;。我们看到的网页，其中显示的实际内容，都是写在了以上两个标记符之间。 HTML的标记标签&amp;web页面 HTML不是一种编程语言，而是一种标记语言！还记得刚刚说的，超文本标记语言-HTML吗？ 标记语言是一种标记标签。标记标签，是可以被用来描述网页的东西。 HTML文档包含了HTML标签（HTML tag），及文本内容。 tag即HTML标签，是由尖括号包围的关键词，如&lt;html&gt;、&lt;/html&gt;，它们通常是成对出现的。第一个就是开始标签（开放标签），第二个即结束标签（闭合标签）。 所以一般长这样：&lt;标签&gt;内容&lt;/标签&gt;。 但是！严肃来说，这（&lt;标签&gt;内容&lt;/标签&gt;）是一个HTML元素哦~🙅别记混了。 HTML文档也叫做Web页面。 我们看下面👇的页面结构吧！ 对，写的html都长这样~。 只有，&lt;body&gt;区域，即图中的白色部分，才会在浏览器中显示 为了能够正确显示网页，我们一般会先进行声明，也就是添加doctype，声明是不区分大小写的： 1234&lt;!doctype html&gt;&lt;!doctype HTML&gt;&lt;!DOCTYPE HTML&gt;&lt;!Doctype Html&gt; 当然啦，只需要一行以上的代码即可，反正不区分大小写。不要写错英文咯，还有感叹号要写在前面，以及html常用的尖括号~ 除了有声明之外，还有可能会在浏览器中出现中文乱码的情况，这该怎么呢？ 解决方法：我们需要在头部，将字符，声明为UTF-8。用&lt;meta charset=&quot;UTF-8&quot;&gt; 12345678910111213&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;第一个标题，采用大标题格式&lt;/h1&gt;&lt;p&gt;我的段落&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 我经常能够在hexo看到这些标签（都是用于定义~）1234567891011121314151617181920212223242526272829303132333435&lt;a&gt;//定义超文本链接&lt;!doctype&gt;//文档类型&lt;!--...--&gt;//注释，在浏览器中不会显示&lt;audio&gt;//音频内容&lt;br&gt;//换行&lt;blockquote&gt;//长的引用&lt;b&gt;//文本粗体&lt;del&gt;//被删除的文本&lt;dir&gt;//不赞成、支持使用。定义目录列表&lt;cite&gt;//引用citation&lt;div&gt;//文档中的节&lt;em&gt;//强调文本&lt;embed&gt;//嵌入的内容，如插件&lt;font&gt;//不支持、赞成使用。定义文字字体、尺寸、颜色&lt;frame&gt;//框架的窗口、框架&lt;footer&gt;//section或document的页脚&lt;figure&gt;//独立的流内容（图像、图表、照片、代码等）&lt;h1&gt;to&lt;h6&gt;//定义HTML文档标题&lt;head&gt;//关于文档的信息&lt;header&gt;//文档的头部区域&lt;hr&gt;//水平线&lt;html&gt;//定义html文档&lt;i&gt;//斜体字&lt;iframe&gt;//内敛框架&lt;img&gt;//图像&lt;ins&gt;//被插入文本&lt;label&gt;//input元素的标注&lt;meta&gt;//关于html文档的元信息&lt;p&gt;//段落&lt;q&gt;//短的引用&lt;s&gt;//不赞成使用。定义加删除线的文本&lt;script&gt;//客户端的脚本&lt;strong&gt;//强调文本&lt;style&gt;//定义文档的样式信息&lt;video&gt;//定义视频，比如电影片段，或者其他视频流 HTML基础常用「标题」「段落」「链接」「图像」&lt;h1&gt; - &lt;h6&gt; 标签来定义标题Heading123&lt;h1&gt;这是一个标题&lt;/h1&gt;&lt;h2&gt;这是一个标题&lt;/h2&gt;&lt;h3&gt;这是一个标题&lt;/h3&gt; &lt;p&gt;段落标签12&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;p&gt;这是另外一个段落。&lt;/p&gt; &lt;a&gt;链接标签1&lt;a href=&quot;http://myoumeng.github.io&quot;&gt;这是一个链接&lt;/a&gt; 运行结果就是： 在 href 属性中指定链接的地址。href 是 Hypertext Reference 的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。常用在：link、a。 &lt;img&gt;图像标签1&lt;img src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt; 图像的名称和尺寸是以属性的形式提供的。src （source）的内容，是页面必不可少的一部分，是引入。href 的内容，是与该页面有关联，是引用。区别就是，引入和引用。 HTML元素之前在介绍中说过head的元素。再详细了解一下： 元素，从开始标签开始，到结束标签结束的整个部分 元素的内容，就是开始标签与结束标签之间的部分 具有空内容的元素，会在开始标签开始时就关闭.&lt;br&gt; 就是没有关闭标签的空元素（ 标签定义换行）。开始标签中添加斜杠，比如 &lt;br/&gt;，是关闭空元素的正确方法.即使 &lt;br&gt; 在所有浏览器中都是有效的，但使用&lt;br/&gt;其实是更长远的保障。 大多数元素，拥有属性 HTML 文档由嵌套的 HTML 元素构成。 HTML 标签对大小写不敏感：&lt;P&gt; 等同于 &lt;p&gt;。许多网站都使用大写的 HTML 标签。 HTML属性 属性是 HTML 元素提供的附加信息。 元素=&lt;开始标签&gt;&lt;内容&gt;&lt;/结束标签&gt;1&lt;a href=&quot;http://www.runoob.com&quot;&gt;这是一个链接&lt;/a&gt; So，属性就如&lt;a href=&quot;http://www.runoob.com&quot;&gt;这是一个链接&lt;/a&gt;在开始标签中**描述的，HTML 链接由 &lt;a&gt; 标签定义，链接的地址在 href 属性中指定: href=&quot;http://www.runoob.com&quot; 属性可以在元素中添加附加信息，常描述于开始标签 属性总是以名称/值对的形式出现，比如：name=”value” 属性值应该始终被包括在引号内。 双引号是最常用的，不过使用单引号也没有问题。 在某些个别的情况下，比如属性值本身就含有双引号，那么必须使用单引号，例如：name=’John “ShotGun” Nelson’ 属性和属性值对大小写不敏感。但推荐小写的属性/属性值 class 属性可以多用 class=” “（引号里面可以填入多个class属性）；id 属性只能单独设置 id=” “（只能填写一个，多个无效） 标题hx 标题很重要！标题很重要！！标题很重要！！！（重要的事情说三遍，也不为过）。 为什么呢？为了搜索引擎与用户浏览。确保将 『HTML 标题标签』只用于标题。不要仅仅是为了生成粗体或大号的文本而使用标题。 搜索引擎使用标题，为您的网页的结构和内容编制索引。 用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。&lt;h1&gt;到&lt;h6&gt;进行定义，重要性递减应该将 h1 用作主标题（最重要的），其后是h2（次重要的），再其次是 h3，以此类推。&lt;hr&gt;创建水平线(horizontal)分割不同的段落、内容12345&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;这是一个段落。&lt;/p&gt; 注释:&lt;!--words--&gt;插入HTML代码中。（words是你注释的内容） + 这样可以提高其可读性，使代码更易被人理解。 + 浏览器会忽略注释，也不会显示它们。 + 开始括号之后（左边的括号）需要紧跟一个叹号，结束括号之前（右边的括号）不需要。 查看HTML源代码- 你是否看过一些网页然后惊叹它是如何实现的的。如果您想找到其中的奥秘，只需要**单击右键**，然后选择&quot;查看源文件&quot;（IE）或&quot;查看页面源代码&quot;（Firefox），其他浏览器的做法也是类似的。这么做会打开一个包含页面 HTML 代码的窗口。 标题与字体逆序对应1到6号标题与1到6号字体逆序对应比如1号字体对应6号标题，2号字体对应5号标题。1234567891011121314151617&lt;h1&gt;这是1号标题&lt;/h1&gt;&lt;font size=&quot;6&quot;&gt;这是6号字体文本&lt;/font&gt;&lt;h2&gt;这是2号标题&lt;/h2&gt;&lt;font size=&quot;5&quot;&gt;这是5号字体文本&lt;/font&gt;&lt;h3&gt;这是3号标题&lt;/h3&gt;&lt;font size=&quot;4&quot;&gt;这是4号字体文本&lt;/font&gt;&lt;h4&gt;这是4号标题&lt;/h4&gt;&lt;font size=&quot;3&quot;&gt;这是3号字体文本&lt;/font&gt;&lt;h5&gt;这是5号标题&lt;/h5&gt;&lt;font size=&quot;2&quot;&gt;这是2号字体文本&lt;/font&gt;&lt;h6&gt;这是6号标题&lt;/h6&gt;&lt;font size=&quot;1&quot;&gt;这是1号字体文本&lt;/font&gt; &lt;p&gt;段落 段落通过&lt;p&gt;标签定义，浏览器会自动地在段落的前后添加空行。（&lt;/p&gt;是块级元素） 12&lt;p&gt;这是一个段落 &lt;/p&gt;&lt;p&gt;这是另一个段落&lt;/p&gt; 即使忘了使用结束标签，大多数浏览器也会正确地将 HTML 显示出来，但是不要依赖这种做法。忘记使用结束标签会产生意想不到的结果和错误。 12&lt;p&gt;这是一个段落&lt;p&gt;这是另一个段落 在不产生一个新段落的情况下进行换行（新行），请使用 &lt;br&gt;标签。&lt;br /&gt;元素是一个空的 HTML元素。由于关闭标签没有任何意义，因此它没有结束标签。1&lt;p&gt;这个&lt;br&gt;段落&lt;br&gt;演示了分行的效果&lt;/p&gt; 写HTML代码时，我们加了很多空格、换行，也只是算作一个空格。（无法通过在HTML代码中添加额外的空格或换行来改变输出的效果。） 当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。 HTML代码中的所有连续的空行（换行）也被显示为一个空格。 文本格式化 HTML 使用标签 &lt;b&gt;(“bold”) 与 &lt;i&gt;(“italic”)对输出的文本进行格式, 如：粗体 or 斜体。这些HTML标签被称为格式化标签。 加粗b、斜体i、上标sup、下标sub、强调strong、放大big、缩小文本small加粗文本斜体文本电脑自动输出这是 下标 和 上标这个文本是strong加粗的 这个文本字体放大这个文本是缩小的 源代码如下1234567&lt;b&gt;加粗文本&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;斜体文本&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;电脑自动输出&lt;/code&gt;&lt;br&gt;&lt;br&gt;这是 &lt;sub&gt; 下标&lt;/sub&gt; 和 &lt;sup&gt; 上标&lt;/sup&gt;&lt;strong&gt;这个文本是strong加粗的&lt;/strong&gt;&lt;big&gt;这个文本字体放大&lt;/big&gt;&lt;small&gt;这个文本是缩小的&lt;/small&gt; pre空行和空格显示源代码如下：12345&lt;pre&gt;此例演示如何使用 pre 标签对空行和 空格进行控制&lt;/pre&gt; 这个pre就意味着，可以显示连续空格、空行，如果没有pre标签，那浏览器会把连续的看做是一个~（前面有提到过哦） 计算机输出code、键盘输入kbd、打字机文本tt、计算机代码样本samp、计算机变量var 源代码如下：12345678&lt;code&gt;计算机输出&lt;/code&gt;&lt;br /&gt;&lt;kbd&gt;键盘输入&lt;/kbd&gt;&lt;tt&gt;打字机文本&lt;/tt&gt;&lt;br&gt;&lt;samp&gt;计算机代码样本&lt;/samp&gt;&lt;br /&gt;&lt;var&gt;计算机变量&lt;/var&gt; &lt;br /&gt;和&lt;br&gt;都可以空行耶✌️ 这些标签常用于显示计算机/编程代码 address显示地址运行结果在图片右方1234567&lt;address&gt;Written by &lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;Jon Doe&lt;/a&gt;.&lt;br&gt;Visit us at:&lt;br&gt;Example.com&lt;br&gt;Box 564, Disneyland&lt;br&gt;USA&lt;/address&gt; #（超）链接 是不是跳过来了？？ 这里是书签，但点击我不会跳转哦点我才可以调转，来返回刚刚的页面吧！ HTML用标签 &lt;a&gt;来设置超文本链接。 HTML 使用超级链接与网络上的另一个文档相连。几乎可以在所有的网页中找到链接。点击链接可以从一张页面跳转到另一张页面。 超链接可以是一个字，一个词，或者一组词，也可以是一幅图像。通过点击这些内容，可以实现跳转到新的文档或者当前文档中的某个部分。 当把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。 在标签&lt;a&gt; 中使用了href属性来描述链接的地址。 如果没有用属性href，就会变成这样，仅仅单独的的链接颜色，而不会实现调转 默认情况下，链接将以以下形式出现在浏览器中： 一个未访问过的链接显示为蓝色字体并带有下划线。 访问过的链接显示为紫色并带有下划线。 点击链接时，链接显示为红色并带有下划线。 注意：如果为这些超链接设置了 CSS 样式，展示样式会根据 CSS 的设定而显示。 href属性描述链接的目标链接的 HTML 代码很简单。它类似这样：1&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt; 什么是url？URL？ URL 是一个网页地址。统一资源定位器(Uniform Resource Locators) URL可以由字母组成，如”runoob.com”， 或互联网协议（IP）地址： 192.68.20.50。 大多数人进入网站使用网站域名来访问，因为名字比数字更容易记住。 Web浏览器通过URL从Web服务器请求页面。 当您点击 HTML 页面中的某个链接时，对应的 &lt;a&gt; 标签指向万维网上的一个地址。 一个统一资源定位器(URL) 用于定位万维网上的文档。 &lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;(链接文本，会显示在屏幕上，给你点击哟) 如果把url替换为https://myoumeng.github.io，点击`链接文本`就会跳转到这个url。显示如下 id属性创建在一个HTML文档书签标记 提示: 书签是不以任何特殊的方式显示，在HTML文档中是不显示的，所以对于读者来说是隐藏的。 点我查看示例 下面👇，我们来脑洞大开一下： 可以这样想，我们想要看书，可是这里有很多本书，我想看a书，那么我们就用a的url，当我们使用href指定到a的url时（href=”url”），我们就可以愉快的看a书了！点我回顾a、href、url，看示例 有了a书，我们还有更加高级的阅读姿势： 2.1 我可以打开新的浏览器窗口，看a书的不同章节，想看哪一章就加载哪一章，此时只要点击多个章节，就会打开多个窗口，任我选择。点我查看相关示例 2.2 我由于浏览器运行不快，那我就设定打开新的章节窗口，会自动取代前面「看完的、已经打开的窗口」章节。点我查看相关示例 2.3 也可以用现有的浏览器窗口，设置为左边是章节目录，右边是小说正文。点我查看相关示例. 好的，我们沉溺在a书中，看了好几个章节，发现，其中的第3章节和第10章节联系颇深，我想对比3、10这两个章节，所以，我需要增加一个书签，那么，我就用id属性。3.1 我在3章节这里加一个书签(id=”wonderful_3”),用&lt;a id=&quot;wonderful_3&quot;&gt;我是第3章&lt;/a&gt;插入第3章中间，相当于标签🏷了。于是，我毫无后顾之忧的去看第10章。3.2 然后我就只需要用href=”#wonderful_3”，即把它&lt;a href=&quot;#wonderful_3&quot;&gt;点我查看第3章&lt;/a&gt;插入第10章任何地方：当我想要立刻回到第3章，那么就可以在这本a书中的第10章点击它，就可以转到第3章看了。 以下皆是示例： 创建图片链接创建图片链接: 源码：1234创建图片链接:&lt;a href=&quot;https://myoumeng.github.io&quot;&gt;&lt;img border=&quot;10&quot; src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fznhorx3orj309805j0vc.jpg&quot; alt=&quot;这个是图片彼岸花&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/a&gt; 无边框的图片链接:源码：1234无边框的图片链接:&lt;a href=&quot;https://myoumeng.github.io&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://ws4.sinaimg.cn/large/006tNc7w9gy1fznhorx3orj309805j0vc.jpg&quot;alt=&quot;这个是图片没有边框的彼岸花&quot; width=&quot;100&quot; height=&quot;50&quot;&gt;&lt;/a&gt; 注意源码里面，以下这些都是在单独的、另外一个&lt;&gt;里面这些都是在单独的里面123456img//表示是图像border//图片边框的像素宽度src//资源，也就是显示的图片，可以来源于url，或者本地文件alt//当图片资源不显示时，alt会显示它的值width//图片宽度height//图片高度 书签标记用id 在当前页面，链接到指定位置。我们来演示一下，定位到刚开始学的HTML吧！ 你试着点击这个：我们来演示一下，定位到刚开始学的HTML吧！我在HTML链接那儿（之前）用的代码如下12&lt;a id=&quot;c3&quot;&gt;这里是书签，但点击我不会跳转哦&lt;/a&gt;&lt;a href=&quot;#c4&quot;&gt;点我才可以调转，来返回刚刚的页面吧！&lt;/a&gt; 欢迎回来我在这里（之后）用的代码如下12&lt;a href=&quot;#c3&quot;&gt;我们来演示一下，定位到刚开始学的HTML吧！&lt;/a&gt;&lt;a id=&quot;c4&quot;&gt;欢迎回来&lt;/a&gt; 所以，用href跳转到本文的指定位置，也就是同一个页面的位置时，要用href和id，id是赋值，href用值，并且值之前要加#；如果是不在同一个页面，需要访问，那就用url+#+id值 在HTML文档中插入ID:&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt; 在HTML文档中创建一个链接到”有用的提示部分(id=”tips”）”：&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt; 在HTML文档中创建一个链接到”有用的提示部分(id=”tips”）”：&lt;a href=&quot;url#tips&quot;&gt;访问有用的提示部分&lt;/a&gt; 注释：请始终将正斜杠添加到子文件夹。 假如这样书写链接：href=”http://www.runoob.com/html&quot;，就会向服务器产生两次 HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求，就像这样：href=”http://www.runoob.com/html/&quot;。 target 属性定义被链接的文档在何处显示跳出框架 如何跳出框架，假如你的页面被固定在框架之内。跳出框架，方法是用target；使用 target 属性，你可以定义被链接的文档在何处显示。 :fa-code fa-ls: 源代码如下 1&lt;a href=&quot;https://www.baidu.com/&quot; target=&quot;_top&quot;&gt;点击这里!&lt;/a&gt; :fa-comment: 语法&lt;a target=&quot;value&quot;&gt; :fa-list-alt fa-ls: 属性值 target属性值 值 描述 _blank 在新窗口中打开被链接文档。浏览器总在一个新打开、未命名的窗口中载入目标文档。 _self 默认。在相同的框架中打开被链接文档。这个目标的值对所有没有指定目标的 &lt;a&gt; 标签是默认目标，它使得目标文档载入并显示在相同的框架或者窗口中作为源文档。这个目标是多余且不必要的，除非和文档标题 &lt;base&gt; 标签中的 target 属性一起使用。 _parent 在父框架集中打开被链接文档。这个目标使得文档载入父窗口或者包含来超链接引用的框架的框架集。如果这个引用是在窗口或者在顶级框架中，那么它与目标 _self 等效。 _top 在整个窗口中打开被链接文档。这个目标使得文档载入包含这个超链接的窗口，用 _top 目标将会清除所有被包含的框架并将文档载入整个浏览器窗口。 framename 在指定的框架中打开被链接文档。 :fa-edit: 提示：这些 target 的所有 4 个值都以下划线开始。 任何其他用一个下划线作为开头的窗口或者目标都会被浏览器忽略，因此，不要将下划线作为文档中定义的任何框架 name 或 id 的第一个字符。 覆盖新打开的窗口 一个简单的内容文档的列表，可以将文档重定向到一个单独的窗口。假如我们看a书，其第一章是百度，第二章是搜狐，第三章是淘宝，第四章是百度学术。然后因为我不想点开一章就是一个新窗口（还要删掉窗口，多麻烦，让我好好的看书呗），我只想一章接着一章看，每次点开章节，都可以直接覆盖之前的章节窗口，那么… 源代码如下123456&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://www.baidu.com/&quot; target=&quot;view_window&quot;&gt;Chapter 1：百度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.sohu.com/&quot; target=&quot;view_window&quot;&gt;Chapter 2：搜狐&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.taobao.com/&quot; target=&quot;view_window&quot;&gt;Chapter 3：淘宝&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://xueshu.baidu.com/&quot; target=&quot;view_window&quot;&gt;Chapter 4：百度学术&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; :fa-bullhorn: 解释：当用户第一次选择内容列表中的某个链接时，浏览器将打开一个新的窗口，将它标记为 “view_window”，然后在其中显示「希望显示的文档内容」。 如果用户从这个内容列表中选择另一个链接，且这个 “view_window” 仍处于打开状态，浏览器就会再次将选定的文档载入那个窗口，取代刚才的那些文档。 在整个过程中，这个包含了内容列表的窗口，是用户可以访问的。通过单击窗口中的一个连接，可使另一个窗口的内容发生变化。 框架：左边内容不变，右边变 设置：当浏览器最初显示这两个框架的时候，左边这个框架包含目录，右边这个框架包含前言。 源代码如下12345678&lt;html&gt;&lt;frameset cols=&quot;200,*&quot;&gt; &lt;frame src=&quot;/example/html/toc.html&quot;&gt; &lt;frame src=&quot;/example/html/pref.html&quot; name=&quot;view_frame&quot;&gt;&lt;/frameset&gt;&lt;/html&gt; 其中，这是 “toc.html” 的源代码：1234567&lt;h3&gt;Table of Contents&lt;/h3&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;pref.html&quot; target=&quot;view_frame&quot;&gt;Preface&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;chap1.html&quot; target=&quot;view_frame&quot;&gt;Chapter 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;chap2.html&quot; target=&quot;view_frame&quot;&gt;Chapter 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;chap3.html&quot; target=&quot;view_frame&quot;&gt;Chapter 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; :fa-exclamation-circle: 请注意，在文档 “toc.html” 中，每个链接的目标都是 “view_frame”，也就是右边的框架。 当用户从左边框架中的目录中选择一个链接时，浏览器会将这个关联的文档载入并显示在右边这个 “view_frame” 框架中。 当其他链接被选中时，右边这个框架中的内容也会发生变化，而左边这个框架始终保持不变。 电子邮件链接 创建电子邮件链接，可以制定收件人、邮件主题、邮件内容、抄送、密送 点我：发送一封有抄送、密送、主题、内容的邮件 源代码1&lt;a href=&quot;mailto:somegirl@qq.com?cc=somebody@163.com&amp;bcc=somebody@gmail.com&amp;subject=这是邮件的主题用subject赋值:&amp;body=这是邮件的内容用body赋值%20You%20are%20invited%20to%20a%20big%20summer%20party!&quot; rel=&quot;nofollow&quot; target=&quot;_top&quot;&gt;点我：发送一封有抄送、密送、主题、内容的邮件&lt;/a&gt; 创建电子邮件链接主要参数 参数 描述 mailto:name@email.com 邮件接收地址 `cc=name@email.com ` 抄送地址。Carbon Copy，又简称为 CC。在网络术语中，抄送就是将邮件同时发送给收信人以外的人，用户所写的邮件抄送一份给别人，对方可以看见该用户的 E-mail。同收件人地址栏一样，不可以超过 1024 个字符。一般来说，使用”抄送”服务时，多人抄送的电子邮件地址使用; 分隔。 `bcc=name@email.com` 密件抄送地址。密件抄送：Blind Carbon Copy ，又称“盲抄送”，和抄送的唯一区别就是它能够让各个收件人无法查看到这封邮件同时还发送给了哪些人。密件抄送是个很实用的功能，假如一次向成百上千位收件人发送邮件，最好采用密件抄送方式：一来可以保护各个收件人的地址不被其他人轻易获得，二来可以使收件人节省下收取大量抄送的 E-mail 地址的时间。 subject=subject text 邮件主题 body=body text 邮件内容 ? 第一个参数分隔符 &amp; 其他参数分隔符 20% 单词之间的空格使用 %20 代替，以确保浏览器可以正常显示文本。 nofollow 是 HTML 页面中 a 标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接或不要追踪此特定链接”。 target=”_top”，如果不用_top,就会在打开邮件软件的同时，打开一个新的浏览器窗口。 多个邮件地址用 ;隔开，空格用%20 代替 HTML头部 :fa-edit:&lt;head&gt; 元素包含了所有的头部标签元素。可以添加在头部区域的元素标签为: &lt;title&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;script&gt;, &lt;noscript&gt;, &lt;base&gt;. &lt;title&gt; 定义了不同文档的标题。它是 head 部分中唯一必需的元素。 定义了浏览器工具栏的标题 当网页添加到收藏夹时，显示在收藏夹中的标题 显示在搜索引擎结果页面的标题 &lt;style&gt; 定义了HTML文档的样式文件引用地址.在此元素中你也可以直接添加样式来渲染 HTML 文档:123456&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;background-color:yellow&#125;p &#123;color:blue&#125;&lt;/style&gt;&lt;/head&gt; &lt;meta&gt; 描述了一些基本的元数据。标签提供了元数据，元数据也不显示在页面上，但会被浏览器解析。通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。 为搜索引擎定义关键词: &lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt; 为网页定义描述内容: &lt;meta name=&quot;description&quot; content=&quot;免费 Web &amp; 编程 教程&quot;&gt; 定义网页作者: &lt;meta name=&quot;author&quot; content=&quot;Runoob&quot;&gt; 每30秒钟刷新当前页面: &lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt; &lt;link&gt; 定义了文档与外部资源之间的关系。通常用于链接到样式表: 123&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt; &lt;script&gt; 用于加载脚本文件，如： JavaScript。 &lt;noscript&gt; noscript 元素用来定义在脚本未被执行时的替代内容（文本）。此标签可被用于可识别 &lt;script&gt;标签但无法支持其中的脚本的浏览器。 如果浏览器支持脚本，那么它不会显示出 noscript 元素中的文本。 无法识别 &lt;script&gt; 标签的浏览器会把此标签的内容显示到页面上。为了避免浏览器这样做，您应当在注释标签中隐藏脚本。老式的（无法识别&lt;script&gt;标签的）浏览器会忽略注释，这样就不会把标签的内容写到页面上，而新式的浏览器则懂得执行这些脚本，即使它们被包围在注释标签中！ &lt;base&gt; &lt;base&gt;标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:123&lt;head&gt;&lt;base href=&quot;http://www.runoob.com/images/&quot; target=&quot;_blank&quot;&gt;&lt;/head&gt; HTML样式CSS CSS (Cascading Style Sheets) 用于渲染HTML元素标签的样式。 两个样式标签 标签 描述 &lt;style&gt; 定义文本样式 &lt;link&gt; 定义资源引用地址 style标签 12345678910&lt;style type=&quot;text/css&quot;&gt;h1 &#123;color:red;&#125;p &#123;color:blue;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;这是一个标题&lt;/h1&gt;&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;/body&gt; 所有主流浏览器都支持 &lt;style&gt; 标签。&lt;style&gt; 标签定义 HTML 文档的样式信息。在 &lt;style&gt;元素中，可以规定在浏览器中如何呈现 HTML 文档。 每个 HTML 文档能包含多个 &lt;style&gt;标签。如需链接外部样式表，请使用 &lt;link&gt;标签。 如果没有使用 “scoped” 属性，则每一个 &lt;style&gt;标签必须位于 head 头部区域。 “scoped” 属性是 HTML 5 中的新属性，它允许我们为文档的指定部分定义样式，而不是整个文档。如果使用 “scoped” 属性，那么所规定的样式只能应用到 style 元素的父元素及其子元素。 style标签属性 属性 值 描述 media media_query 为样式表规定不同的媒体类型。media 属性规定目前资源是为何种媒介/设备优化的。该属性大多用在为不同媒介类型（如屏幕预览和打印预览）规定不同样式的 CSS 样式表。该属性可以接受多个值。点这了解更多关于media的内容 scoped scoped 如果使用该属性，则样式仅仅应用到 style 元素的父元素及其子元素。目前只有 Firefox属性支持 scoped 属性。 type text/css 规定样式表的 MIME 类型。标签常用的 MIME 类型是 “text/css”，它规定样式表。 link标签1234&lt;body&gt;&lt;h1&gt;我是通过样式文件 styles.css 渲染后显示的。&lt;/h1&gt;&lt;p&gt;我也是。&lt;/p&gt;&lt;/body&gt; 所有主流浏览器都支持 &lt;link&gt; 标签。 标签定义文档与外部资源的关系。 标签最常见的用途是链接样式表。 link 元素是空元素，它仅包含属性。在 HTML 中， 标签没有结束标签。此元素只能存在于 head 部分，不过它可出现任何次数。 link标签属性 属性 值 描述 href URL 定义被链接文档的位置。 hreflang language_code 定义被链接文档中文本的语言。 media media_query 规定被链接文档将显示在什么设备上。 rel alternate archives author bookmark external first help icon last license next nofollow noreferrer pingback prefetch prev search sidebar stylesheet tag up 必需。定义当前文档与被链接文档之间的关系。 sizesNew HeightxWidth any 定义了链接属性大小，只对属性 rel=”icon” 起作用。 type MIME_type 规定被链接文档的 MIME 类型。只有当设置了 href 属性时，才能使用该属性。link标签常用的 MIME 类型是 “text/css”，它规定样式表。 CSS通过三种方式添加到HTML中第一种：内联样式 在HTML元素中使用”style” 属性使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。 1&lt;p style=&quot;color:blue;margin-left:20px;&quot;&gt;This is a paragraph.&lt;/p&gt; 背景色属性（background-color）定义一个元素的背景颜色： 1234&lt;body style=&quot;background-color:yellow;&quot;&gt;&lt;h2 style=&quot;background-color:red;&quot;&gt;这是一个标题&lt;/h2&gt;&lt;p style=&quot;background-color:green;&quot;&gt;这是一个段落。&lt;/p&gt;&lt;/body&gt; 使用font-family（字体），color（颜色），和font-size（字体大小）属性来定义字体的样式: 12&lt;h1 style=&quot;font-family:verdana;&quot;&gt;一个标题&lt;/h1&gt;&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;一个段落。&lt;/p&gt; 现在通常使用font-family（字体），color（颜色），和font-size（字体大小）属性来定义文本样式，而不是使用&lt;font&gt;标签。 使用 text-align（文字对齐）属性指定文本的水平与垂直对齐方式： 12&lt;h1 style=&quot;text-align:center;&quot;&gt;居中对齐的标题&lt;/h1&gt;&lt;p&gt;这是一个段落。&lt;/p&gt; 文本对齐属性 text-align取代了旧标签&lt;center&gt;。 第二种：内部样式表 在HTML文档头部 &lt;head&gt; 区域使用&lt;style&gt; 元素，来包含CSS。当单个文件需要特别样式时，就可以使用内部样式表。你可以在&lt;head&gt; 部分通过 &lt;style&gt;标签定义内部样式表: 123456&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;background-color:yellow;&#125;p &#123;color:blue;&#125;&lt;/style&gt;&lt;/head&gt; 第三种：外部引用 使用外部 CSS 文件当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。123&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt; CSS修饰标签的样式，有 “内联” 和 “外引” 两种方式。对于大部分标签，以上两种方法均可，且修改父级标签，子级标签特性也会改变。但某些标签却无法通过修改父级标签来改变子级标签特性，如a标签，修改其颜色特性，必须直接修改a标签的特性才可。如:1&lt;a href=&quot;#&quot; style=&quot;color:red;&quot; rel=&quot;nofollow&quot;&gt;只能使用&quot;内联&quot;方式&lt;/a&gt; 最好的方式是通过外部引用CSS文件。]]></content>
      <categories>
        <category>语言语法</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo,Next，Markdown...Hello!!!]]></title>
    <url>%2Fpost%2F35336.html</url>
    <content type="text"><![CDATA[你好呀!我花了近1周的时间孕育的小生命。对，就是你「彼岸遇见欧萌」博客 你 终于 诞！ 生！！ 啦！！！ HexoNext Markdown编辑器，是Markdown写作者必备的插件，不仅可以高亮显示Markdown语法还支持很多编程语言的语法高亮显示。特别注意：MarkdownEditing只针对 md\mdown\mmd\txt 格式文件才启用。 特性MarkdownEditing 从视觉和便捷性上针对 Markdown 文档的编辑进行了一系列的优化。如： 颜色方案仿 Byword及iA writer自动匹配星号（*）、下划线（_）及反引号（）`选中文本按下以上符号能自动在所选文本前后添加配对的符号方便粗体、斜体和代码框的输入 常用命令 组合键Ctrl+Shift+P 调出命令面板 输入Package Control: Install Package，回车 在搜索框中输入要安装的包名（一个一个，不能同时安多个）静待几秒即可安装成功 推荐很多插件，很多适合写代码也适合markdown。也就是适合码农啦 详细教程之Sublime Text3 + Markdown + 实时预览 四款不错的写markdown并且实时预览的插件：Sublime Text3 的 Markdown 实时预览全面总结 Markdown常用语法/命令/代码多级标题用 # 。 [TOC]生成目录 生成表格]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Markdown</tag>
        <tag>Atom</tag>
      </tags>
  </entry>
</search>
